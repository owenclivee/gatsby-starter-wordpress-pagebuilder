# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

"Nodes used to manage content"
interface WPGraphQL_ContentNode {
    "The ID of the object in the database."
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: WPGraphQL_User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn't exist or is greater than 15 seconds"
    editLock: WPGraphQL_EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The global unique identifier for this post. This currently matches the value stored in WP_Post->guid and the guid column in the \"post_objects\" database table."
    guid: String
    "The globally unique identifier of the node."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The uri slug for the post. This is equivalent to the WP_Post->post_name field and the post_name column in the database for the \"post_objects\" table."
    slug: String
    "The current status of the object"
    status: String
    "URI path for the resource"
    uri: String!
}

"Content node with hierarchical (parent/child) relationships"
interface WPGraphQL_HierarchicalContentNode {
    "Ancestors of the object"
    ancestors(
        "The types of ancestors to check for. Defaults to the same type as the current object"
        types: [WPGraphQL_ContentTypeEnum]
    ): [WPGraphQL_PostObjectUnion]
    "The parent of the object. The parent object can be of various types"
    parent: WPGraphQL_PostObjectUnion
}

"An object with an ID"
interface WPGraphQL_Node {
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have an author assigned to it"
interface WPGraphQL_NodeWithAuthor {
    "The author field will return a queryable User type matching the post's author."
    author: WPGraphQL_User
}

"A node that can have comments associated with it"
interface WPGraphQL_NodeWithComments {
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
}

"A node that supports the content editor"
interface WPGraphQL_NodeWithContentEditor {
    "The content of the post."
    content(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
}

"A node that can have an excerpt"
interface WPGraphQL_NodeWithExcerpt {
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
}

"A node that can have a featured image set"
interface WPGraphQL_NodeWithFeaturedImage {
    "The featured image for the object"
    featuredImage: WPGraphQL_MediaItem
}

"A node that can have page attributes"
interface WPGraphQL_NodeWithPageAttributes {
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
}

"A node that can have revisions"
interface WPGraphQL_NodeWithRevisions {
    "True if the node is a revision of another node"
    isRevision: Boolean
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: WPGraphQL_PostObjectUnion
}

"A node that NodeWith a title"
interface WPGraphQL_NodeWithTitle {
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
}

"A node that can have trackbacks and pingbacks"
interface WPGraphQL_NodeWithTrackbacks {
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "URLs queued to be pinged."
    toPing: [String]
}

"Terms are nodes within a Taxonomy, used to group and relate other nodes."
interface WPGraphQL_TermNode {
    "The number of objects connected to the object"
    count: Int
    "Identifies the primary key from the database."
    databaseId: Int!
    "The description of the object"
    description: String
    "Unique identifier for the term"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String!
}

"Any node that has a URI"
interface WPGraphQL_UniformResourceIdentifiable {
    "The unique resource identifier path"
    databaseId: Int!
    "The unique resource identifier path"
    id: ID!
    "The unique resource identifier path"
    uri: String!
}

union WPGraphQL_CommentAuthorUnion = WPGraphQL_CommentAuthor | WPGraphQL_User

union WPGraphQL_ContentRevisionUnion = WPGraphQL_Page | WPGraphQL_Post

union WPGraphQL_MenuItemObjectUnion = WPGraphQL_Category | WPGraphQL_MenuItem | WPGraphQL_Page | WPGraphQL_Post | WPGraphQL_PostFormat | WPGraphQL_Tag

union WPGraphQL_Page_Pagebuilder_Layouts = WPGraphQL_Page_Pagebuilder_Layouts_FullWidth | WPGraphQL_Page_Pagebuilder_Layouts_Hero | WPGraphQL_Page_Pagebuilder_Layouts_TextBlock

union WPGraphQL_Page_Pagebuilder_Layouts_FullWidth_Components = WPGraphQL_Page_Pagebuilder_Layouts_FullWidth_Components_Banner

union WPGraphQL_PostObjectUnion = WPGraphQL_MediaItem | WPGraphQL_Page | WPGraphQL_Post

union WPGraphQL_TermObjectUnion = WPGraphQL_Category | WPGraphQL_PostFormat | WPGraphQL_Tag

"React component node"
type Component implements Node {
    children: [Node!]!
    componentChunkName: String!
    componentName: String!
    componentPath: String!
    id: ID!
    internal: Internal!
    parent: Node
}

type ComponentConnection {
    distinct(field: ComponentFieldsEnum!): [String!]!
    edges: [ComponentEdge!]!
    group(field: ComponentFieldsEnum!, limit: Int, skip: Int): [ComponentGroupConnection!]!
    nodes: [Component!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ComponentEdge {
    next: Component
    node: Component!
    previous: Component
}

type ComponentGroupConnection {
    edges: [ComponentEdge!]!
    field: String!
    fieldValue: String
    nodes: [Component!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type Directory implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type DirectoryConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    nodes: [Directory!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type File implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason : "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason : "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    childImageSharp: ImageSharp
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type FileConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    nodes: [File!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSource implements Node {
    children: [Node!]!
    fieldName: String
    id: ID!
    internal: Internal!
    parent: Node
    typeName: String
}

type GraphQLSourceConnection {
    distinct(field: GraphQLSourceFieldsEnum!): [String!]!
    edges: [GraphQLSourceEdge!]!
    group(field: GraphQLSourceFieldsEnum!, limit: Int, skip: Int): [GraphQLSourceGroupConnection!]!
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GraphQLSourceEdge {
    next: GraphQLSource
    node: GraphQLSource!
    previous: GraphQLSource
}

type GraphQLSourceGroupConnection {
    edges: [GraphQLSourceEdge!]!
    field: String!
    fieldValue: String
    nodes: [GraphQLSource!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpFluid
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
    resolutions(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResolutions @deprecated(reason : "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
    sizes(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = NO_CHANGE,
        toFormatBase64: ImageFormat = NO_CHANGE,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpSizes @deprecated(reason : "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpFluid {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type ImageSharpResolutions {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpSizes {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type Internal {
    content: String
    contentDigest: String!
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
    totalCount: Int!
}

type Query {
    allComponent(filter: ComponentFilterInput, limit: Int, skip: Int, sort: ComponentSortInput): ComponentConnection!
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
    allGraphQlSource(filter: GraphQLSourceFilterInput, limit: Int, skip: Int, sort: GraphQLSourceSortInput): GraphQLSourceConnection!
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
    allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
    component(children: NodeFilterListInput, componentChunkName: StringQueryOperatorInput, componentName: StringQueryOperatorInput, componentPath: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): Component
    componentFile: GraphQLComponent
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
    graphQlSource(children: NodeFilterListInput, fieldName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, typeName: StringQueryOperatorInput): GraphQLSource
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput, resolutions: ImageSharpResolutionsFilterInput, sizes: ImageSharpSizesFilterInput): ImageSharp
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
    siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, componentPath: StringQueryOperatorInput, context: SitePageContextFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, matchPath: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
    wpgraphql: WPGraphQL!
}

type Site implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    host: String
    id: ID!
    internal: Internal!
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    siteMetadata: SiteSiteMetadata
}

type SiteBuildMetadata implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type SiteBuildMetadataConnection {
    distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteBuildMetadataEdge {
    next: SiteBuildMetadata
    node: SiteBuildMetadata!
    previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
    edges: [SiteBuildMetadataEdge!]!
    field: String!
    fieldValue: String
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteGroupConnection {
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    nodes: [Site!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String!
    componentChunkName: String!
    componentPath: String
    context: SitePageContext
    id: ID!
    internal: Internal!
    internalComponentName: String!
    isCreatedByStatefulCreatePages: Boolean
    matchPath: String
    parent: Node
    path: String!
    pluginCreator: SitePlugin
    pluginCreatorId: String
}

type SitePageConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePageContext {
    allPosts: [SitePageContextAllPosts]
    hasNextPage: Boolean
    id: String
    itemsPerPost: Int
    label: String
    nodes: [SitePageContextNodes]
    page: SitePageContextPage
    pageNumber: Int
    post: SitePageContextPost
    publisher: Boolean
}

type SitePageContextAllPosts {
    author: SitePageContextAllPostsAuthor
    categories: SitePageContextAllPostsCategories
    content: String
    date: Date
    excerpt: String
    featuredImage: SitePageContextAllPostsFeaturedImage
    id: String
    link: String
    postId: Int
    slug: String
    tags: SitePageContextAllPostsTags
    title: String
    uri: String
}

type SitePageContextAllPostsAuthor {
    name: String
    slug: String
}

type SitePageContextAllPostsCategories {
    nodes: [SitePageContextAllPostsCategoriesNodes]
}

type SitePageContextAllPostsCategoriesNodes {
    id: String
    name: String
    slug: String
}

type SitePageContextAllPostsFeaturedImage {
    altText: String
    imageFile: SitePageContextAllPostsFeaturedImageImageFile
    sourceUrl: String
}

type SitePageContextAllPostsFeaturedImageImageFile {
    childImageSharp: SitePageContextAllPostsFeaturedImageImageFileChildImageSharp
}

type SitePageContextAllPostsFeaturedImageImageFileChildImageSharp {
    fluid: SitePageContextAllPostsFeaturedImageImageFileChildImageSharpFluid
}

type SitePageContextAllPostsFeaturedImageImageFileChildImageSharpFluid {
    aspectRatio: Int
    sizes: String
    src: String
    srcSet: String
    tracedSVG: String
}

type SitePageContextAllPostsTags {
    nodes: [SitePageContextAllPostsTagsNodes]
}

type SitePageContextAllPostsTagsNodes {
    id: String
    name: String
    slug: String
}

type SitePageContextNodes {
    author: SitePageContextNodesAuthor
    categories: SitePageContextNodesCategories
    content: String
    date: Date
    excerpt: String
    featuredImage: SitePageContextNodesFeaturedImage
    id: String
    link: String
    postId: Int
    slug: String
    tags: SitePageContextNodesTags
    title: String
    uri: String
}

type SitePageContextNodesAuthor {
    name: String
    slug: String
}

type SitePageContextNodesCategories {
    nodes: [SitePageContextNodesCategoriesNodes]
}

type SitePageContextNodesCategoriesNodes {
    id: String
    name: String
    slug: String
}

type SitePageContextNodesFeaturedImage {
    altText: String
    imageFile: SitePageContextNodesFeaturedImageImageFile
    sourceUrl: String
}

type SitePageContextNodesFeaturedImageImageFile {
    childImageSharp: SitePageContextNodesFeaturedImageImageFileChildImageSharp
}

type SitePageContextNodesFeaturedImageImageFileChildImageSharp {
    fluid: SitePageContextNodesFeaturedImageImageFileChildImageSharpFluid
}

type SitePageContextNodesFeaturedImageImageFileChildImageSharpFluid {
    aspectRatio: Int
    sizes: String
    src: String
    srcSet: String
    tracedSVG: String
}

type SitePageContextNodesTags {
    nodes: [SitePageContextNodesTagsNodes]
}

type SitePageContextNodesTagsNodes {
    id: String
    name: String
    slug: String
}

type SitePageContextPage {
    content: String
    featuredImage: SitePageContextPageFeaturedImage
    id: String
    isFrontPage: Boolean
    pageBuilder: SitePageContextPagePageBuilder
    pageId: Int
    slug: String
    title: String
    uri: String
}

type SitePageContextPageFeaturedImage {
    altText: String
    imageFile: SitePageContextPageFeaturedImageImageFile
    sourceUrl: String
}

type SitePageContextPageFeaturedImageImageFile {
    childImageSharp: SitePageContextPageFeaturedImageImageFileChildImageSharp
}

type SitePageContextPageFeaturedImageImageFileChildImageSharp {
    fluid: SitePageContextPageFeaturedImageImageFileChildImageSharpFluid
}

type SitePageContextPageFeaturedImageImageFileChildImageSharpFluid {
    aspectRatio: Int
    sizes: String
    src: String
    srcSet: String
    tracedSVG: String
}

type SitePageContextPagePageBuilder {
    layouts: [SitePageContextPagePageBuilderLayouts]
}

type SitePageContextPagePageBuilderLayouts {
    components: [SitePageContextPagePageBuilderLayoutsComponents]
    fieldGroupName: String
}

type SitePageContextPagePageBuilderLayoutsComponents {
    componentFile: SitePageContextPagePageBuilderLayoutsComponentsComponentFile
    fieldGroupName: String
    heading: String
    image: SitePageContextPagePageBuilderLayoutsComponentsImage
    text: String
}

type SitePageContextPagePageBuilderLayoutsComponentsComponentFile {
    _xxgraphQLComponent: SitePageContextPagePageBuilderLayoutsComponentsComponentFile_xxgraphQLComponent
}

type SitePageContextPagePageBuilderLayoutsComponentsComponentFile_xxgraphQLComponent {
    componentChunkName: String
    componentName: String
    componentPath: String
}

type SitePageContextPagePageBuilderLayoutsComponentsImage {
    imageFile: SitePageContextPagePageBuilderLayoutsComponentsImageImageFile
    sourceUrl: String
}

type SitePageContextPagePageBuilderLayoutsComponentsImageImageFile {
    childImageSharp: SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharp
}

type SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharp {
    fluid: SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharpFluid
}

type SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharpFluid {
    aspectRatio: Float
    sizes: String
    src: String
    srcSet: String
    tracedSVG: String
}

type SitePageContextPost {
    author: SitePageContextPostAuthor
    categories: SitePageContextPostCategories
    content: String
    date: Date
    excerpt: String
    featuredImage: SitePageContextPostFeaturedImage
    id: String
    link: String
    postId: Int
    slug: String
    tags: SitePageContextPostTags
    title: String
    uri: String
}

type SitePageContextPostAuthor {
    name: String
    slug: String
}

type SitePageContextPostCategories {
    nodes: [SitePageContextPostCategoriesNodes]
}

type SitePageContextPostCategoriesNodes {
    id: String
    name: String
    slug: String
}

type SitePageContextPostFeaturedImage {
    altText: String
    imageFile: SitePageContextPostFeaturedImageImageFile
    sourceUrl: String
}

type SitePageContextPostFeaturedImageImageFile {
    childImageSharp: SitePageContextPostFeaturedImageImageFileChildImageSharp
}

type SitePageContextPostFeaturedImageImageFileChildImageSharp {
    fluid: SitePageContextPostFeaturedImageImageFileChildImageSharpFluid
}

type SitePageContextPostFeaturedImageImageFileChildImageSharpFluid {
    aspectRatio: Int
    sizes: String
    src: String
    srcSet: String
    tracedSVG: String
}

type SitePageContextPostTags {
    nodes: [SitePageContextPostTagsNodes]
}

type SitePageContextPostTagsNodes {
    id: String
    name: String
    slug: String
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: SitePluginPackageJson
    parent: Node
    pluginFilepath: String
    pluginOptions: SitePluginPluginOptions
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SitePluginPackageJson {
    dependencies: [SitePluginPackageJsonDependencies]
    description: String
    devDependencies: [SitePluginPackageJsonDevDependencies]
    keywords: [String]
    license: String
    main: String
    name: String
    peerDependencies: [SitePluginPackageJsonPeerDependencies]
    version: String
}

type SitePluginPackageJsonDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonDevDependencies {
    name: String
    version: String
}

type SitePluginPackageJsonPeerDependencies {
    name: String
    version: String
}

type SitePluginPluginOptions {
    background_color: String
    cacheDigest: String
    cache_busting_mode: String
    display: String
    fieldName: String
    icon: String
    include_favicon: Boolean
    legacy: Boolean
    name: String
    path: String
    pathCheck: Boolean
    short_name: String
    start_url: String
    theme_color: String
    theme_color_in_head: Boolean
    typeName: String
    url: String
}

type SiteSiteMetadata {
    author: String
    description: String
    title: String
}

"The root entry point into the Graph"
type WPGraphQL {
    "Entry point to get all settings for the site"
    allSettings: WPGraphQL_Settings
    "Connection between the RootQuery type and the RootQuery type"
    categories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToCategoryConnectionWhereArgs
    ): WPGraphQL_RootQueryToCategoryConnection
    "A 0bject"
    category(id: ID!, idType: WPGraphQL_CategoryIdType): WPGraphQL_Category
    "Returns a Comment"
    comment(id: ID!): WPGraphQL_Comment
    "Connection between the RootQuery type and the RootQuery type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToCommentConnectionWhereArgs
    ): WPGraphQL_RootQueryToCommentConnection
    "A node used to manage content"
    contentNode(
        "The content type the node is used for. Required when idType is set to \"name\" or \"slug\""
        contentType: WPGraphQL_ContentTypeEnum,
        id: ID!,
        "Type of unique identifier to fetch a content node by. Default is Global ID"
        idType: WPGraphQL_ContentNodeIdTypeEnum
    ): WPGraphQL_ContentNode
    "Connection between the RootQuery type and the RootQuery type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToContentNodeConnectionWhereArgs
    ): WPGraphQL_RootQueryToContentNodeConnection
    "Fetch a Content Type node by unique Identifier"
    contentType(
        "Unique Identifier for the Content Type node"
        id: ID!,
        "The type of Identifier used in the ID field"
        idType: WPGraphQL_ContentTypeIdTypeEnum
    ): WPGraphQL_ContentType
    "Connection between the RootQuery type and the RootQuery type"
    contentTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int
    ): WPGraphQL_RootQueryToContentTypeConnection
    discussionSettings: WPGraphQL_DiscussionSettings
    generalSettings: WPGraphQL_GeneralSettings
    "A 0bject"
    mediaItem(id: ID!, idType: WPGraphQL_MediaItemIdType): WPGraphQL_MediaItem
    "A mediaItem object"
    mediaItemBy(
        "Get the object by its global ID"
        id: ID,
        "Get the mediaItem by its database ID"
        mediaItemId: Int,
        "Get the mediaItem by its slug (only available for non-hierarchical types)"
        slug: String,
        "Get the mediaItem by its uri"
        uri: String
    ): WPGraphQL_MediaItem @deprecated(reason : "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "Connection between the RootQuery type and the RootQuery type"
    mediaItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToMediaItemConnectionWhereArgs
    ): WPGraphQL_RootQueryToMediaItemConnection
    "A WordPress navigation menu"
    menu(id: ID!): WPGraphQL_Menu
    "A WordPress navigation menu item"
    menuItem(id: ID!): WPGraphQL_MenuItem
    "Connection between the RootQuery type and the RootQuery type"
    menuItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToMenuItemConnectionWhereArgs
    ): WPGraphQL_RootQueryToMenuItemConnection
    "Connection between the RootQuery type and the RootQuery type"
    menus(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToMenuConnectionWhereArgs
    ): WPGraphQL_RootQueryToMenuConnection
    "Fetches an object given its ID"
    node(
        "The unique identifier of the node"
        id: ID
    ): WPGraphQL_Node
    nodeByUri(
        "Unique Resource Identifier in the form of a path or permalink for a node. Ex: \"/hello-world\""
        uri: String!
    ): WPGraphQL_UniformResourceIdentifiable
    "A 0bject"
    page(id: ID!, idType: WPGraphQL_PageIdType): WPGraphQL_Page
    "A page object"
    pageBy(
        "Get the object by its global ID"
        id: ID,
        "Get the page by its database ID"
        pageId: Int,
        "Get the page by its uri"
        uri: String
    ): WPGraphQL_Page @deprecated(reason : "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "Connection between the RootQuery type and the RootQuery type"
    pages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToPageConnectionWhereArgs
    ): WPGraphQL_RootQueryToPageConnection
    "A WordPress plugin"
    plugin(id: ID!): WPGraphQL_Plugin
    "Connection between the RootQuery type and the RootQuery type"
    plugins(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int
    ): WPGraphQL_RootQueryToPluginConnection
    "A 0bject"
    post(id: ID!, idType: WPGraphQL_PostIdType): WPGraphQL_Post
    "A post object"
    postBy(
        "Get the object by its global ID"
        id: ID,
        "Get the post by its database ID"
        postId: Int,
        "Get the post by its slug (only available for non-hierarchical types)"
        slug: String,
        "Get the post by its uri"
        uri: String
    ): WPGraphQL_Post @deprecated(reason : "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "A 0bject"
    postFormat(id: ID!, idType: WPGraphQL_PostFormatIdType): WPGraphQL_PostFormat
    "Connection between the RootQuery type and the RootQuery type"
    postFormats(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToPostFormatConnectionWhereArgs
    ): WPGraphQL_RootQueryToPostFormatConnection
    "Connection between the RootQuery type and the RootQuery type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToPostConnectionWhereArgs
    ): WPGraphQL_RootQueryToPostConnection
    readingSettings: WPGraphQL_ReadingSettings
    "Connection between the RootQuery type and the RootQuery type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToContentRevisionUnionConnectionWhereArgs
    ): WPGraphQL_RootQueryToContentRevisionUnionConnection
    "A 0bject"
    tag(id: ID!, idType: WPGraphQL_TagIdType): WPGraphQL_Tag
    "Connection between the RootQuery type and the RootQuery type"
    tags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToTagConnectionWhereArgs
    ): WPGraphQL_RootQueryToTagConnection
    "Connection between the RootQuery type and the RootQuery type"
    taxonomies(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int
    ): WPGraphQL_RootQueryToTaxonomyConnection
    "Fetch a Taxonomy node by unique Identifier"
    taxonomy(
        "Unique Identifier for the Taxonomy node"
        id: ID!,
        "The type of Identifier used in the ID field"
        idType: WPGraphQL_TaxonomyIdTypeEnum
    ): WPGraphQL_Taxonomy
    "A node in a taxonomy used to group and relate content nodes"
    termNode(
        id: ID!,
        "Type of unique identifier to fetch a term node by. Default is Global ID"
        idType: WPGraphQL_TermNodeIdTypeEnum,
        "The taxonomy of the tern node. Required when idType is set to \"name\" or \"slug\""
        taxonomy: WPGraphQL_TaxonomyEnum
    ): WPGraphQL_TermNode
    "Connection between the RootQuery type and the RootQuery type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToTermNodeConnectionWhereArgs
    ): WPGraphQL_RootQueryToTermNodeConnection
    "A Theme object"
    theme(id: ID!): WPGraphQL_Theme
    "Connection between the RootQuery type and the RootQuery type"
    themes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int
    ): WPGraphQL_RootQueryToThemeConnection
    "Returns a user"
    user(id: ID!, idType: WPGraphQL_UserNodeIdTypeEnum): WPGraphQL_User
    "Returns a user role"
    userRole(id: ID!): WPGraphQL_UserRole
    "Connection between the RootQuery type and the RootQuery type"
    userRoles(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int
    ): WPGraphQL_RootQueryToUserRoleConnection
    "Connection between the RootQuery type and the RootQuery type"
    users(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_RootQueryToUserConnectionWhereArgs
    ): WPGraphQL_RootQueryToUserConnection
    "Returns the current user"
    viewer: WPGraphQL_User
    writingSettings: WPGraphQL_WritingSettings
}

"Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from."
type WPGraphQL_Avatar {
    "URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo)."
    default: String
    "HTML attributes to insert in the IMG element. Is not sanitized."
    extraAttr: String
    "Whether to always show the default image, never the Gravatar."
    forceDefault: Boolean
    "Whether the avatar was successfully found."
    foundAvatar: Boolean
    "Height of the avatar image."
    height: Int
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order."
    rating: String
    "Type of url scheme to use. Typically HTTP vs. HTTPS."
    scheme: String
    "The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image."
    size: Int
    "URL for the gravatar image source."
    url: String
    "Width of the avatar image."
    width: Int
}

"The category type"
type WPGraphQL_Category implements WPGraphQL_Node & WPGraphQL_TermNode & WPGraphQL_UniformResourceIdentifiable {
    "The ancestors of the object"
    ancestors: [WPGraphQL_Category]
    "The id field matches the WP_Post-&gt;ID field."
    categoryId: Int @deprecated(reason : "Deprecated in favor of databaseId")
    "Connection between the category type and the category type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_CategoryToCategoryConnectionWhereArgs
    ): WPGraphQL_CategoryToCategoryConnection
    "The number of objects connected to the object"
    count: Int
    "Identifies the primary key from the database."
    databaseId: Int!
    "The description of the object"
    description: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The parent object"
    parent: WPGraphQL_Category
    "Connection between the category type and the category type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_CategoryToPostConnectionWhereArgs
    ): WPGraphQL_CategoryToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the category type and the category type"
    taxonomy: WPGraphQL_CategoryToTaxonomyConnection
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String!
}

"Connection between the category type and the category type"
type WPGraphQL_CategoryToCategoryConnection {
    "Edges for the CategoryToCategoryConnection connection"
    edges: [WPGraphQL_CategoryToCategoryConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Category]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_CategoryToCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Category
}

"Connection between the category type and the category type"
type WPGraphQL_CategoryToPostConnection {
    "Edges for the CategoryToPostConnection connection"
    edges: [WPGraphQL_CategoryToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Post]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_CategoryToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Post
}

"Connection between the category type and the category type"
type WPGraphQL_CategoryToTaxonomyConnection {
    "The nodes of the connection, without the edges"
    node: WPGraphQL_Taxonomy
}

"A Comment object"
type WPGraphQL_Comment implements WPGraphQL_Node {
    "User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL."
    agent: String
    "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
    approved: Boolean
    "The author of the comment"
    author: WPGraphQL_CommentAuthorUnion
    "IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL."
    authorIp: String
    "Connection between the Comment type and the Comment type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_CommentToCommentConnectionWhereArgs
    ): WPGraphQL_CommentToCommentConnection
    "ID for the comment, unique among comments."
    commentId: Int
    "The object the comment was added to"
    commentedOn: WPGraphQL_PostObjectUnion
    "Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL."
    content(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL."
    date: String
    "Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL."
    dateGmt: String
    "The globally unique identifier for the comment object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL."
    karma: Int
    "Parent comment of current comment. This field is equivalent to the WP_Comment instance matching the WP_Comment-&gt;comment_parent ID."
    parent: WPGraphQL_Comment
    "Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL."
    type: String
}

"A Comment Author object"
type WPGraphQL_CommentAuthor implements WPGraphQL_Node {
    "The email for the comment author"
    email: String
    "The globally unique identifier for the comment author object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The name for the comment author."
    name: String
    "The url the comment author."
    url: String
}

"Connection between the Comment type and the Comment type"
type WPGraphQL_CommentToCommentConnection {
    "Edges for the CommentToCommentConnection connection"
    edges: [WPGraphQL_CommentToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Comment]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_CommentToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Comment
}

"An Post Type object"
type WPGraphQL_ContentType implements WPGraphQL_Node {
    "Whether this content type should can be exported."
    canExport: Boolean
    "List of Taxonomies connected to the Post Type"
    connectedTaxonomies(
        "Select which taxonomies to limit the results to"
        taxonomies: [WPGraphQL_TaxonomyEnum]
    ): [WPGraphQL_Taxonomy]
    "A list of Taxonomies associated with the post type"
    connectedTaxonomyNames(
        "Select which taxonomies to limit the results to"
        taxonomies: [WPGraphQL_TaxonomyEnum]
    ): [String]
    "Whether delete this type of content when the author of it is deleted from the system."
    deleteWithUser: Boolean
    "Description of the content type."
    description: String
    "Whether to exclude posts with this post type from front end search results."
    excludeFromSearch: Boolean
    "The plural name of the post type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the post type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether this content type should have archives. Content archives are generated by type and by date."
    hasArchive: Boolean
    "Whether the post type is hierarchical, for example pages."
    hierarchical: Boolean
    "The globally unique identifier of the post-type object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the content type."
    label: String
    "Details about the post type labels."
    labels: WPGraphQL_PostTypeLabelDetails
    "The name of the icon file to display as a menu icon."
    menuIcon: String
    "The position of this post type in the menu. Only applies if show_in_menu is true."
    menuPosition: Int
    "The internal name of the post type. This should not be used for display purposes."
    name: String
    "Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention."
    public: Boolean
    "Whether queries can be performed on the front end for the post type as part of parse_request()."
    publiclyQueryable: Boolean
    "Name of content type to diplay in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Makes this post type available via the admin bar."
    showInAdminBar: Boolean
    "Whether to add the post type to the GraphQL Schema."
    showInGraphql: Boolean
    "Where to show the post type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that."
    showInMenu: Boolean
    "Makes this post type available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing this post type in the admin."
    showUi: Boolean
}

"The payload for the createCategory mutation"
type WPGraphQL_CreateCategoryPayload {
    "The created category"
    category: WPGraphQL_Category
    clientMutationId: String!
}

"The payload for the createComment mutation"
type WPGraphQL_CreateCommentPayload {
    clientMutationId: String!
    "The comment that was created"
    comment: WPGraphQL_Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the createMediaItem mutation"
type WPGraphQL_CreateMediaItemPayload {
    clientMutationId: String!
    mediaItem: WPGraphQL_MediaItem
}

"The payload for the createPage mutation"
type WPGraphQL_CreatePagePayload {
    clientMutationId: String!
    page: WPGraphQL_Page
}

"The payload for the createPostFormat mutation"
type WPGraphQL_CreatePostFormatPayload {
    clientMutationId: String!
    "The created post_format"
    postFormat: WPGraphQL_PostFormat
}

"The payload for the createPost mutation"
type WPGraphQL_CreatePostPayload {
    clientMutationId: String!
    post: WPGraphQL_Post
}

"The payload for the createTag mutation"
type WPGraphQL_CreateTagPayload {
    clientMutationId: String!
    "The created post_tag"
    tag: WPGraphQL_Tag
}

"The payload for the createUser mutation"
type WPGraphQL_CreateUserPayload {
    clientMutationId: String!
    user: WPGraphQL_User
}

"The payload for the deleteCategory mutation"
type WPGraphQL_DeleteCategoryPayload {
    "The deteted term object"
    category: WPGraphQL_Category
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
}

"The payload for the deleteComment mutation"
type WPGraphQL_DeleteCommentPayload {
    clientMutationId: String!
    "The deleted comment object"
    comment: WPGraphQL_Comment
    "The deleted comment ID"
    deletedId: ID
}

"The payload for the deleteMediaItem mutation"
type WPGraphQL_DeleteMediaItemPayload {
    clientMutationId: String!
    "The ID of the deleted mediaItem"
    deletedId: ID
    "The mediaItem before it was deleted"
    mediaItem: WPGraphQL_MediaItem
}

"The payload for the deletePage mutation"
type WPGraphQL_DeletePagePayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    page: WPGraphQL_Page
}

"The payload for the deletePostFormat mutation"
type WPGraphQL_DeletePostFormatPayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The deteted term object"
    postFormat: WPGraphQL_PostFormat
}

"The payload for the deletePost mutation"
type WPGraphQL_DeletePostPayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    post: WPGraphQL_Post
}

"The payload for the deleteTag mutation"
type WPGraphQL_DeleteTagPayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The deteted term object"
    tag: WPGraphQL_Tag
}

"The payload for the deleteUser mutation"
type WPGraphQL_DeleteUserPayload {
    clientMutationId: String!
    "The ID of the user that you just deleted"
    deletedId: ID
    "The deleted user object"
    user: WPGraphQL_User
}

"The discussion setting type"
type WPGraphQL_DiscussionSettings {
    "Allow people to submit comments on new posts."
    defaultCommentStatus: String
    "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
    defaultPingStatus: String
}

"Info on whether the object is locked by another user editing it"
type WPGraphQL_EditLock {
    "The time when the object was last edited"
    editTime: String
    "The user that most recently edited the object"
    user: WPGraphQL_User
}

"The general setting type"
type WPGraphQL_GeneralSettings {
    "A date format for all date strings."
    dateFormat: String
    "Site tagline."
    description: String
    "This address is used for admin purposes, like new user notification."
    email: String
    "WordPress locale code."
    language: String
    "A day number of the week that the week should start on."
    startOfWeek: Int
    "A time format for all time strings."
    timeFormat: String
    "A city in the same timezone as you."
    timezone: String
    "Site title."
    title: String
    "Site URL."
    url: String
}

"File details for a Media Item"
type WPGraphQL_MediaDetails {
    "The height of the mediaItem"
    file: String
    "The height of the mediaItem"
    height: Int
    meta: WPGraphQL_MediaItemMeta
    "The available sizes of the mediaItem"
    sizes: [WPGraphQL_MediaSize]
    "The width of the mediaItem"
    width: Int
}

"The mediaItem type"
type WPGraphQL_MediaItem implements WPGraphQL_ContentNode & WPGraphQL_HierarchicalContentNode & WPGraphQL_Node & WPGraphQL_NodeWithAuthor & WPGraphQL_NodeWithComments & WPGraphQL_NodeWithTitle & WPGraphQL_UniformResourceIdentifiable {
    "Alternative text to display when resource is not displayed"
    altText: String
    "Ancestors of the object"
    ancestors(
        "The types of ancestors to check for. Defaults to the same type as the current object"
        types: [WPGraphQL_ContentTypeEnum]
    ): [WPGraphQL_PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: WPGraphQL_User
    "The caption for the resource"
    caption(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the mediaItem type and the mediaItem type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_MediaItemToCommentConnectionWhereArgs
    ): WPGraphQL_MediaItemToCommentConnection
    "Connection between the mediaItem type and the mediaItem type"
    contentType: WPGraphQL_MediaItemToContentTypeConnection
    "The ID of the object in the database."
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Description of the image (stored as post_content)"
    description(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: WPGraphQL_User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: WPGraphQL_EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique identifier of the attachment object."
    id: ID!
    imageFile: File
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "Details about the mediaItem"
    mediaDetails: WPGraphQL_MediaDetails
    "The id field matches the WP_Post-&gt;ID field."
    mediaItemId: Int! @deprecated(reason : "Deprecated in favor of the databaseId field")
    "Url of the mediaItem"
    mediaItemUrl: String
    "Type of resource"
    mediaType: String
    "The mime type of the mediaItem"
    mimeType: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the object. The parent object can be of various types"
    parent: WPGraphQL_PostObjectUnion
    "The sizes attribute value for an image."
    sizes(
        "Size of the MediaItem to calculate sizes with"
        size: WPGraphQL_MediaItemSizeEnum
    ): String
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "Url of the mediaItem"
    sourceUrl(
        "Size of the MediaItem to return"
        size: WPGraphQL_MediaItemSizeEnum
    ): String
    "The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths."
    srcSet(
        "Size of the MediaItem to calculate srcSet with"
        size: WPGraphQL_MediaItemSizeEnum
    ): String
    "The current status of the object"
    status: String
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "URI path for the resource"
    uri: String!
}

"Meta connected to a MediaItem"
type WPGraphQL_MediaItemMeta {
    aperture: Float
    camera: String
    caption: String
    copyright: String
    createdTimestamp: Int
    credit: String
    focalLength: Int
    iso: Int
    keywords: [String]
    orientation: String
    shutterSpeed: Float
    title: String
}

"Connection between the mediaItem type and the mediaItem type"
type WPGraphQL_MediaItemToCommentConnection {
    "Edges for the MediaItemToCommentConnection connection"
    edges: [WPGraphQL_MediaItemToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Comment]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_MediaItemToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Comment
}

"Connection between the mediaItem type and the mediaItem type"
type WPGraphQL_MediaItemToContentTypeConnection {
    "The nodes of the connection, without the edges"
    node: WPGraphQL_ContentType
}

"Details of an available size for a media item"
type WPGraphQL_MediaSize {
    "The file of the for the referenced size"
    file: String
    "The height of the for the referenced size"
    height: String
    "The mime type of the resource"
    mimeType: String
    "The referenced size name"
    name: String
    "The url of the for the referenced size"
    sourceUrl: String
    "The width of the for the referenced size"
    width: String
}

"Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme."
type WPGraphQL_Menu implements WPGraphQL_Node {
    "The number of items in the menu"
    count: Int
    "The globally unique identifier of the nav menu object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "WP ID of the nav menu."
    menuId: Int
    "Connection between the Menu type and the Menu type"
    menuItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_MenuToMenuItemConnectionWhereArgs
    ): WPGraphQL_MenuToMenuItemConnection
    "Display name of the menu. Equivalent to WP_Term-&gt;name."
    name: String
    "The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"
    slug: String
}

"Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu."
type WPGraphQL_MenuItem implements WPGraphQL_Node {
    "Connection between the MenuItem type and the MenuItem type"
    childItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_MenuItemToMenuItemConnectionWhereArgs
    ): WPGraphQL_MenuItemToMenuItemConnection
    "The object connected to this menu item."
    connectedObject: WPGraphQL_MenuItemObjectUnion
    "Class attribute for the menu item link"
    cssClasses: [String]
    "Description of the menu item."
    description: String
    "The globally unique identifier of the nav menu item object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Label or title of the menu item."
    label: String
    "Link relationship (XFN) of the menu item."
    linkRelationship: String
    "WP ID of the menu item."
    menuItemId: Int
    "Target attribute for the menu item link."
    target: String
    "Title attribute for the menu item link"
    title: String
    "URL or destination of the menu item."
    url: String
}

"Connection between the MenuItem type and the MenuItem type"
type WPGraphQL_MenuItemToMenuItemConnection {
    "Edges for the MenuItemToMenuItemConnection connection"
    edges: [WPGraphQL_MenuItemToMenuItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_MenuItem]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_MenuItemToMenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_MenuItem
}

"Connection between the Menu type and the Menu type"
type WPGraphQL_MenuToMenuItemConnection {
    "Edges for the MenuToMenuItemConnection connection"
    edges: [WPGraphQL_MenuToMenuItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_MenuItem]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_MenuToMenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_MenuItem
}

"The page type"
type WPGraphQL_Page implements WPGraphQL_ContentNode & WPGraphQL_HierarchicalContentNode & WPGraphQL_Node & WPGraphQL_NodeWithAuthor & WPGraphQL_NodeWithComments & WPGraphQL_NodeWithContentEditor & WPGraphQL_NodeWithFeaturedImage & WPGraphQL_NodeWithPageAttributes & WPGraphQL_NodeWithRevisions & WPGraphQL_NodeWithTitle & WPGraphQL_UniformResourceIdentifiable {
    "Ancestors of the object"
    ancestors(
        "The types of ancestors to check for. Defaults to the same type as the current object"
        types: [WPGraphQL_ContentTypeEnum]
    ): [WPGraphQL_PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: WPGraphQL_User
    "Connection between the page type and the page type"
    childPages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PageToPageConnectionWhereArgs
    ): WPGraphQL_PageToPageConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the page type and the page type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PageToCommentConnectionWhereArgs
    ): WPGraphQL_PageToCommentConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "Connection between the page type and the page type"
    contentType: WPGraphQL_PageToContentTypeConnection
    "The ID of the object in the database."
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: WPGraphQL_User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: WPGraphQL_EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The featured image for the object"
    featuredImage: WPGraphQL_MediaItem
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique identifier of the page object."
    id: ID!
    "Whether this page is set to the static front page."
    isFrontPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "True if the node is a revision of another node"
    isRevision: Boolean
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    pageBuilder: WPGraphQL_Page_Pagebuilder
    "The id field matches the WP_Post-&gt;ID field."
    pageId: Int! @deprecated(reason : "Deprecated in favor of the databaseId field")
    "The parent of the object. The parent object can be of various types"
    parent: WPGraphQL_PostObjectUnion
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: WPGraphQL_PostObjectUnion
    "Connection between the page type and the page type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PageToRevisionConnectionWhereArgs
    ): WPGraphQL_PageToRevisionConnection
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "URI path for the resource"
    uri: String!
}

"Connection between the page type and the page type"
type WPGraphQL_PageToCommentConnection {
    "Edges for the PageToCommentConnection connection"
    edges: [WPGraphQL_PageToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Comment]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PageToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Comment
}

"Connection between the page type and the page type"
type WPGraphQL_PageToContentTypeConnection {
    "The nodes of the connection, without the edges"
    node: WPGraphQL_ContentType
}

"Connection between the page type and the page type"
type WPGraphQL_PageToPageConnection {
    "Edges for the PageToPageConnection connection"
    edges: [WPGraphQL_PageToPageConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Page]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PageToPageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Page
}

"Connection between the page type and the page type"
type WPGraphQL_PageToRevisionConnection {
    "Edges for the pageToRevisionConnection connection"
    edges: [WPGraphQL_PageToRevisionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Page]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PageToRevisionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Page
}

"Field Group"
type WPGraphQL_Page_Pagebuilder {
    fieldGroupName: String
    layouts: [WPGraphQL_Page_Pagebuilder_Layouts]
}

"Group within the flex field"
type WPGraphQL_Page_Pagebuilder_Layouts_FullWidth {
    components: [WPGraphQL_Page_Pagebuilder_Layouts_FullWidth_Components]
    fieldGroupName: String
}

"Group within the flex field"
type WPGraphQL_Page_Pagebuilder_Layouts_FullWidth_Components_Banner {
    bannerType: String
    componentFile: GraphQLComponent
    fieldGroupName: String
    heading: String
    image: WPGraphQL_MediaItem
    text: String
}

"Group within the flex field"
type WPGraphQL_Page_Pagebuilder_Layouts_Hero {
    fieldGroupName: String
    image: WPGraphQL_MediaItem
    text: String
    textColour: String
}

"Group within the flex field"
type WPGraphQL_Page_Pagebuilder_Layouts_TextBlock {
    backgroundColour: String
    fieldGroupName: String
    text: String
    textColour: String
}

"An plugin object"
type WPGraphQL_Plugin implements WPGraphQL_Node {
    "Name of the plugin author(s), may also be a company name."
    author: String
    "URI for the related author(s)/company website."
    authorUri: String
    "Description of the plugin."
    description: String
    "The globally unique identifier of the plugin object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the plugin."
    name: String
    "URI for the plugin website. This is useful for directing users for support requests etc."
    pluginUri: String
    "Current version of the plugin."
    version: String
}

"The post type"
type WPGraphQL_Post implements WPGraphQL_ContentNode & WPGraphQL_Node & WPGraphQL_NodeWithAuthor & WPGraphQL_NodeWithComments & WPGraphQL_NodeWithContentEditor & WPGraphQL_NodeWithExcerpt & WPGraphQL_NodeWithFeaturedImage & WPGraphQL_NodeWithRevisions & WPGraphQL_NodeWithTitle & WPGraphQL_NodeWithTrackbacks & WPGraphQL_UniformResourceIdentifiable {
    "The author field will return a queryable User type matching the post&#039;s author."
    author: WPGraphQL_User
    "Connection between the post type and the post type"
    categories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PostToCategoryConnectionWhereArgs
    ): WPGraphQL_PostToCategoryConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the post type and the post type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PostToCommentConnectionWhereArgs
    ): WPGraphQL_PostToCommentConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "Connection between the post type and the post type"
    contentType: WPGraphQL_PostToContentTypeConnection
    "The ID of the object in the database."
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: WPGraphQL_User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: WPGraphQL_EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "The featured image for the object"
    featuredImage: WPGraphQL_MediaItem
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique identifier of the post object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "True if the node is a revision of another node"
    isRevision: Boolean
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Connection between the post type and the post type"
    postFormats(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PostToPostFormatConnectionWhereArgs
    ): WPGraphQL_PostToPostFormatConnection
    "The id field matches the WP_Post-&gt;ID field."
    postId: Int! @deprecated(reason : "Deprecated in favor of the databaseId field")
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: WPGraphQL_PostObjectUnion
    "Connection between the post type and the post type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PostToRevisionConnectionWhereArgs
    ): WPGraphQL_PostToRevisionConnection
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Connection between the post type and the post type"
    tags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PostToTagConnectionWhereArgs
    ): WPGraphQL_PostToTagConnection
    "Terms connected to the object"
    termNames(
        "Select which taxonomies to limit the results to"
        taxonomies: [WPGraphQL_TaxonomyEnum]
    ): [String]
    "Terms connected to the object"
    termSlugs(
        "Select which taxonomies to limit the results to"
        taxonomies: [WPGraphQL_TaxonomyEnum]
    ): [String]
    "Terms connected to the object"
    terms(
        "Select which taxonomies to limit the results to"
        taxonomies: [WPGraphQL_TaxonomyEnum]
    ): [WPGraphQL_TermObjectUnion]
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: WPGraphQL_PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "URI path for the resource"
    uri: String!
}

"The postFormat type"
type WPGraphQL_PostFormat implements WPGraphQL_Node & WPGraphQL_TermNode & WPGraphQL_UniformResourceIdentifiable {
    "The number of objects connected to the object"
    count: Int
    "Identifies the primary key from the database."
    databaseId: Int!
    "The description of the object"
    description: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The id field matches the WP_Post-&gt;ID field."
    postFormatId: Int @deprecated(reason : "Deprecated in favor of databaseId")
    "Connection between the postFormat type and the postFormat type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_PostFormatToPostConnectionWhereArgs
    ): WPGraphQL_PostFormatToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the postFormat type and the postFormat type"
    taxonomy: WPGraphQL_PostFormatToTaxonomyConnection
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String!
}

"Connection between the postFormat type and the postFormat type"
type WPGraphQL_PostFormatToPostConnection {
    "Edges for the PostFormatToPostConnection connection"
    edges: [WPGraphQL_PostFormatToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Post]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PostFormatToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Post
}

"Connection between the postFormat type and the postFormat type"
type WPGraphQL_PostFormatToTaxonomyConnection {
    "The nodes of the connection, without the edges"
    node: WPGraphQL_Taxonomy
}

"Connection between the post type and the post type"
type WPGraphQL_PostToCategoryConnection {
    "Edges for the PostToCategoryConnection connection"
    edges: [WPGraphQL_PostToCategoryConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Category]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PostToCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Category
}

"Connection between the post type and the post type"
type WPGraphQL_PostToCommentConnection {
    "Edges for the PostToCommentConnection connection"
    edges: [WPGraphQL_PostToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Comment]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PostToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Comment
}

"Connection between the post type and the post type"
type WPGraphQL_PostToContentTypeConnection {
    "The nodes of the connection, without the edges"
    node: WPGraphQL_ContentType
}

"Connection between the post type and the post type"
type WPGraphQL_PostToPostFormatConnection {
    "Edges for the PostToPostFormatConnection connection"
    edges: [WPGraphQL_PostToPostFormatConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_PostFormat]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PostToPostFormatConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_PostFormat
}

"Connection between the post type and the post type"
type WPGraphQL_PostToRevisionConnection {
    "Edges for the postToRevisionConnection connection"
    edges: [WPGraphQL_PostToRevisionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Post]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PostToRevisionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Post
}

"Connection between the post type and the post type"
type WPGraphQL_PostToTagConnection {
    "Edges for the PostToTagConnection connection"
    edges: [WPGraphQL_PostToTagConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Tag]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_PostToTagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Tag
}

"Details for labels of the PostType"
type WPGraphQL_PostTypeLabelDetails {
    "Default is ‘Add New’ for both hierarchical and non-hierarchical types."
    addNew: String
    "Label for adding a new singular item."
    addNewItem: String
    "Label to signify all items in a submenu link."
    allItems: String
    "Label for archives in nav menus"
    archives: String
    "Label for the attributes meta box."
    attributes: String
    "Label for editing a singular item."
    editItem: String
    "Label for the Featured Image meta box title."
    featuredImage: String
    "Label for the table views hidden heading."
    filterItemsList: String
    "Label for the media frame button."
    insertIntoItem: String
    "Label for the table hidden heading."
    itemsList: String
    "Label for the table pagination hidden heading."
    itemsListNavigation: String
    "Label for the menu name."
    menuName: String
    "General name for the post type, usually plural."
    name: String
    "Label for the new item page title."
    newItem: String
    "Label used when no items are found."
    notFound: String
    "Label used when no items are in the trash."
    notFoundInTrash: String
    "Label used to prefix parents of hierarchical items."
    parentItemColon: String
    "Label for removing the featured image."
    removeFeaturedImage: String
    "Label for searching plural items."
    searchItems: String
    "Label for setting the featured image."
    setFeaturedImage: String
    "Name for one object of this post type."
    singularName: String
    "Label for the media frame filter."
    uploadedToThisItem: String
    "Label in the media frame for using a featured image."
    useFeaturedImage: String
    "Label for viewing a singular item."
    viewItem: String
    "Label for viewing post type archives."
    viewItems: String
}

"The reading setting type"
type WPGraphQL_ReadingSettings {
    "Blog pages show at most."
    postsPerPage: Int
}

"The payload for the registerUser mutation"
type WPGraphQL_RegisterUserPayload {
    clientMutationId: String!
    user: WPGraphQL_User
}

"The payload for the resetUserPassword mutation"
type WPGraphQL_ResetUserPasswordPayload {
    clientMutationId: String!
    user: WPGraphQL_User
}

"The payload for the restoreComment mutation"
type WPGraphQL_RestoreCommentPayload {
    clientMutationId: String!
    "The restored comment object"
    comment: WPGraphQL_Comment
    "The ID of the restored comment"
    restoredId: ID
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToCategoryConnection {
    "Edges for the RootQueryToCategoryConnection connection"
    edges: [WPGraphQL_RootQueryToCategoryConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Category]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Category
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToCommentConnection {
    "Edges for the RootQueryToCommentConnection connection"
    edges: [WPGraphQL_RootQueryToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Comment]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Comment
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToContentNodeConnection {
    "Edges for the RootQueryToContentNodeConnection connection"
    edges: [WPGraphQL_RootQueryToContentNodeConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_ContentNode]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToContentNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_ContentNode
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToContentRevisionUnionConnection {
    "Edges for the RootQueryToContentRevisionUnionConnection connection"
    edges: [WPGraphQL_RootQueryToContentRevisionUnionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_ContentRevisionUnion]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToContentRevisionUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_ContentRevisionUnion
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToContentTypeConnection {
    "Edges for the RootQueryToContentTypeConnection connection"
    edges: [WPGraphQL_RootQueryToContentTypeConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_ContentType]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToContentTypeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_ContentType
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToMediaItemConnection {
    "Edges for the RootQueryToMediaItemConnection connection"
    edges: [WPGraphQL_RootQueryToMediaItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_MediaItem]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToMediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_MediaItem
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToMenuConnection {
    "Edges for the RootQueryToMenuConnection connection"
    edges: [WPGraphQL_RootQueryToMenuConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Menu]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToMenuConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Menu
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToMenuItemConnection {
    "Edges for the RootQueryToMenuItemConnection connection"
    edges: [WPGraphQL_RootQueryToMenuItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_MenuItem]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToMenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_MenuItem
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToPageConnection {
    "Edges for the RootQueryToPageConnection connection"
    edges: [WPGraphQL_RootQueryToPageConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Page]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToPageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Page
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToPluginConnection {
    "Edges for the RootQueryToPluginConnection connection"
    edges: [WPGraphQL_RootQueryToPluginConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Plugin]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToPluginConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Plugin
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToPostConnection {
    "Edges for the RootQueryToPostConnection connection"
    edges: [WPGraphQL_RootQueryToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Post]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Post
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToPostFormatConnection {
    "Edges for the RootQueryToPostFormatConnection connection"
    edges: [WPGraphQL_RootQueryToPostFormatConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_PostFormat]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToPostFormatConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_PostFormat
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToTagConnection {
    "Edges for the RootQueryToTagConnection connection"
    edges: [WPGraphQL_RootQueryToTagConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Tag]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToTagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Tag
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToTaxonomyConnection {
    "Edges for the RootQueryToTaxonomyConnection connection"
    edges: [WPGraphQL_RootQueryToTaxonomyConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Taxonomy]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToTaxonomyConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Taxonomy
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToTermNodeConnection {
    "Edges for the RootQueryToTermNodeConnection connection"
    edges: [WPGraphQL_RootQueryToTermNodeConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_TermNode]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToTermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_TermNode
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToThemeConnection {
    "Edges for the RootQueryToThemeConnection connection"
    edges: [WPGraphQL_RootQueryToThemeConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Theme]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToThemeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Theme
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToUserConnection {
    "Edges for the RootQueryToUserConnection connection"
    edges: [WPGraphQL_RootQueryToUserConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_User]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToUserConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_User
}

"Connection between the RootQuery type and the RootQuery type"
type WPGraphQL_RootQueryToUserRoleConnection {
    "Edges for the RootQueryToUserRoleConnection connection"
    edges: [WPGraphQL_RootQueryToUserRoleConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_UserRole]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_RootQueryToUserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_UserRole
}

"The payload for the sendPasswordResetEmail mutation"
type WPGraphQL_SendPasswordResetEmailPayload {
    clientMutationId: String!
    "The user that the password reset email was sent to"
    user: WPGraphQL_User
}

"All of the registered settings"
type WPGraphQL_Settings {
    "Allow people to submit comments on new posts."
    discussionSettingsDefaultCommentStatus: String
    "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
    discussionSettingsDefaultPingStatus: String
    "A date format for all date strings."
    generalSettingsDateFormat: String
    "Site tagline."
    generalSettingsDescription: String
    "This address is used for admin purposes, like new user notification."
    generalSettingsEmail: String
    "WordPress locale code."
    generalSettingsLanguage: String
    "A day number of the week that the week should start on."
    generalSettingsStartOfWeek: Int
    "A time format for all time strings."
    generalSettingsTimeFormat: String
    "A city in the same timezone as you."
    generalSettingsTimezone: String
    "Site title."
    generalSettingsTitle: String
    "Site URL."
    generalSettingsUrl: String
    "Blog pages show at most."
    readingSettingsPostsPerPage: Int
    "Default post category."
    writingSettingsDefaultCategory: Int
    "Default post format."
    writingSettingsDefaultPostFormat: String
    "Convert emoticons like :-) and :-P to graphics on display."
    writingSettingsUseSmilies: Boolean
}

"The tag type"
type WPGraphQL_Tag implements WPGraphQL_Node & WPGraphQL_TermNode & WPGraphQL_UniformResourceIdentifiable {
    "The number of objects connected to the object"
    count: Int
    "Identifies the primary key from the database."
    databaseId: Int!
    "The description of the object"
    description: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the tag type and the tag type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_TagToPostConnectionWhereArgs
    ): WPGraphQL_TagToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The id field matches the WP_Post-&gt;ID field."
    tagId: Int @deprecated(reason : "Deprecated in favor of databaseId")
    "Connection between the tag type and the tag type"
    taxonomy: WPGraphQL_TagToTaxonomyConnection
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String!
}

"Connection between the tag type and the tag type"
type WPGraphQL_TagToPostConnection {
    "Edges for the TagToPostConnection connection"
    edges: [WPGraphQL_TagToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Post]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_TagToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Post
}

"Connection between the tag type and the tag type"
type WPGraphQL_TagToTaxonomyConnection {
    "The nodes of the connection, without the edges"
    node: WPGraphQL_Taxonomy
}

"A taxonomy object"
type WPGraphQL_Taxonomy implements WPGraphQL_Node {
    "A list of Post Types associated with the taxonomy"
    connectedPostTypeNames(
        "Select which post types to limit the results to"
        types: [WPGraphQL_ContentTypeEnum]
    ): [String]
    "List of Post Types connected to the Taxonomy"
    connectedPostTypes(
        "Select which post types to limit the results to"
        types: [WPGraphQL_ContentTypeEnum]
    ): [WPGraphQL_ContentType]
    "Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description"
    description: String
    "The plural name of the post type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the post type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether the taxonomy is hierarchical"
    hierarchical: Boolean
    "The globally unique identifier of the taxonomy object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Name of the taxonomy shown in the menu. Usually plural."
    label: String
    "The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label"
    name: String
    "Whether the taxonomy is publicly queryable"
    public: Boolean
    "Name of content type to diplay in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud"
    showCloud: Boolean
    "Whether to display a column for the taxonomy on its post type listing screens."
    showInAdminColumn: Boolean
    "Whether to add the post type to the GraphQL Schema."
    showInGraphql: Boolean
    "Whether to show the taxonomy in the admin menu"
    showInMenu: Boolean
    "Whether the taxonomy is available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether to show the taxonomy in the quick/bulk edit panel."
    showInQuickEdit: Boolean
    "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing terms in this taxonomy in the admin"
    showUi: Boolean
}

"A theme object"
type WPGraphQL_Theme implements WPGraphQL_Node {
    "Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; )."
    author: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; )."
    authorUri: String
    "The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; )."
    description: String
    "The globally unique identifier of the theme object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; )."
    name: String
    "The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot()."
    screenshot: String
    "The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet()."
    slug: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; )."
    tags: [String]
    "A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; )."
    themeUri: String
    "The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; )."
    version: Float
}

"The payload for the UpdateCategory mutation"
type WPGraphQL_UpdateCategoryPayload {
    "The created category"
    category: WPGraphQL_Category
    clientMutationId: String!
}

"The payload for the updateComment mutation"
type WPGraphQL_UpdateCommentPayload {
    clientMutationId: String!
    "The comment that was created"
    comment: WPGraphQL_Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the updateMediaItem mutation"
type WPGraphQL_UpdateMediaItemPayload {
    clientMutationId: String!
    mediaItem: WPGraphQL_MediaItem
}

"The payload for the updatePage mutation"
type WPGraphQL_UpdatePagePayload {
    clientMutationId: String!
    page: WPGraphQL_Page
}

"The payload for the UpdatePostFormat mutation"
type WPGraphQL_UpdatePostFormatPayload {
    clientMutationId: String!
    "The created post_format"
    postFormat: WPGraphQL_PostFormat
}

"The payload for the updatePost mutation"
type WPGraphQL_UpdatePostPayload {
    clientMutationId: String!
    post: WPGraphQL_Post
}

"The payload for the updateSettings mutation"
type WPGraphQL_UpdateSettingsPayload {
    allSettings: WPGraphQL_Settings
    clientMutationId: String!
    discussionSettings: WPGraphQL_DiscussionSettings
    generalSettings: WPGraphQL_GeneralSettings
    readingSettings: WPGraphQL_ReadingSettings
    writingSettings: WPGraphQL_WritingSettings
}

"The payload for the UpdateTag mutation"
type WPGraphQL_UpdateTagPayload {
    clientMutationId: String!
    "The created post_tag"
    tag: WPGraphQL_Tag
}

"The payload for the updateUser mutation"
type WPGraphQL_UpdateUserPayload {
    clientMutationId: String!
    user: WPGraphQL_User
}

"A User object"
type WPGraphQL_User implements WPGraphQL_Node & WPGraphQL_UniformResourceIdentifiable {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar(
        "Whether to always show the default image, never the Gravatar. Default false"
        forceDefault: Boolean,
        rating: WPGraphQL_AvatarRatingEnum,
        "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
        size: Int = 96
    ): WPGraphQL_Avatar
    "User metadata option name. Usually it will be &quot;wp_capabilities&quot;."
    capKey: String
    "A list of capabilities (permissions) granted to the user"
    capabilities: [String]
    "Connection between the User type and the User type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_UserToCommentConnectionWhereArgs
    ): WPGraphQL_UserToCommentConnection
    "Identifies the primary key from the database."
    databaseId: Int!
    "Description of the user."
    description: String
    "Email address of the user. This is equivalent to the WP_User-&gt;user_email property."
    email: String
    "A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps."
    extraCapabilities: [String]
    "First name of the user. This is equivalent to the WP_User-&gt;user_first_name property."
    firstName: String
    "The globally unique identifier for the user object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property."
    lastName: String
    "The preferred language locale set for the user. Value derived from get_user_locale()."
    locale: String
    "Connection between the User type and the User type"
    mediaItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_UserToMediaItemConnectionWhereArgs
    ): WPGraphQL_UserToMediaItemConnection
    "Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property."
    name: String
    "The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename"
    nicename: String
    "Nickname of the user."
    nickname: String
    "Connection between the User type and the User type"
    pages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_UserToPageConnectionWhereArgs
    ): WPGraphQL_UserToPageConnection
    "Connection between the User type and the User type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_UserToPostConnectionWhereArgs
    ): WPGraphQL_UserToPostConnection
    "The date the user registered or was created. The field follows a full ISO8601 date string format."
    registeredDate: String
    "Connection between the User and Revisions authored by the user"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int,
        "Arguments for filtering the connection"
        where: WPGraphQL_UserToContentRevisionUnionConnectionWhereArgs
    ): WPGraphQL_UserToContentRevisionUnionConnection
    "Connection between the User type and the User type"
    roles(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        last: Int
    ): WPGraphQL_UserToUserRoleConnection
    "The slug for the user. This field is equivalent to WP_User-&gt;user_nicename"
    slug: String
    "The unique resource identifier path"
    uri: String!
    "A website url that is associated with the user."
    url: String
    "The Id of the user. Equivalent to WP_User-&gt;ID"
    userId: Int
    "Username for the user. This field is equivalent to WP_User-&gt;user_login."
    username: String
}

"A user role object"
type WPGraphQL_UserRole implements WPGraphQL_Node {
    "The capabilities that belong to this role"
    capabilities: [String]
    "The display name of the role"
    displayName: String
    "The globally unique identifier for the user role object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The registered name of the role"
    name: String
}

"Connection between the User type and the User type"
type WPGraphQL_UserToCommentConnection {
    "Edges for the UserToCommentConnection connection"
    edges: [WPGraphQL_UserToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Comment]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_UserToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Comment
}

"Connection between the User type and the User type"
type WPGraphQL_UserToContentRevisionUnionConnection {
    "Edges for the UserToContentRevisionUnionConnection connection"
    edges: [WPGraphQL_UserToContentRevisionUnionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_ContentRevisionUnion]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_UserToContentRevisionUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_ContentRevisionUnion
}

"Connection between the User type and the User type"
type WPGraphQL_UserToMediaItemConnection {
    "Edges for the UserToMediaItemConnection connection"
    edges: [WPGraphQL_UserToMediaItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_MediaItem]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_UserToMediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_MediaItem
}

"Connection between the User type and the User type"
type WPGraphQL_UserToPageConnection {
    "Edges for the UserToPageConnection connection"
    edges: [WPGraphQL_UserToPageConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Page]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_UserToPageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Page
}

"Connection between the User type and the User type"
type WPGraphQL_UserToPostConnection {
    "Edges for the UserToPostConnection connection"
    edges: [WPGraphQL_UserToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_Post]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_UserToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_Post
}

"Connection between the User type and the User type"
type WPGraphQL_UserToUserRoleConnection {
    "Edges for the UserToUserRoleConnection connection"
    edges: [WPGraphQL_UserToUserRoleConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [WPGraphQL_UserRole]
    "Information about pagination in a connection."
    pageInfo: WPGraphQL_WPPageInfo
}

"An edge in a connection"
type WPGraphQL_UserToUserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: WPGraphQL_UserRole
}

"Information about pagination in a connection."
type WPGraphQL_WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The writing setting type"
type WPGraphQL_WritingSettings {
    "Default post category."
    defaultCategory: Int
    "Default post format."
    defaultPostFormat: String
    "Convert emoticons like :-) and :-P to graphics on display."
    useSmilies: Boolean
}

enum ComponentFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    componentChunkName
    componentName
    componentPath
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
}

enum DirectoryFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum FileFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    childImageSharp___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resolutions___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___sizes___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum GraphQLSourceFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    fieldName
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    typeName
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
    INSIDE
    OUTSIDE
}

enum ImageFormat {
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageSharpFieldsEnum {
    children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    children___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    original___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___children___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___children___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___content @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___contentDigest @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___description @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___fieldOwners @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___ignoreType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___mediaType @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___owner @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___internal___type @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___children @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    parent___parent___parent___id @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resize___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___height @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    resolutions___width @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___aspectRatio @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___base64 @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___originalImg @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___originalName @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___presentationHeight @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___presentationWidth @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___sizes @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___src @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcSet @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcSetWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___srcWebp @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
    sizes___tracedSVG @deprecated(reason : "Sorting on fields that need arguments to resolve is deprecated.")
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum SiteBuildMetadataFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
}

enum SiteFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    host
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pathPrefix
    polyfill
    port
    siteMetadata___author
    siteMetadata___description
    siteMetadata___title
}

enum SitePageFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    component
    componentChunkName
    componentPath
    context___allPosts
    context___allPosts___author___name
    context___allPosts___author___slug
    context___allPosts___categories___nodes
    context___allPosts___content
    context___allPosts___date
    context___allPosts___excerpt
    context___allPosts___featuredImage___altText
    context___allPosts___featuredImage___sourceUrl
    context___allPosts___id
    context___allPosts___link
    context___allPosts___postId
    context___allPosts___slug
    context___allPosts___tags___nodes
    context___allPosts___title
    context___allPosts___uri
    context___hasNextPage
    context___id
    context___itemsPerPost
    context___label
    context___nodes
    context___nodes___author___name
    context___nodes___author___slug
    context___nodes___categories___nodes
    context___nodes___content
    context___nodes___date
    context___nodes___excerpt
    context___nodes___featuredImage___altText
    context___nodes___featuredImage___sourceUrl
    context___nodes___id
    context___nodes___link
    context___nodes___postId
    context___nodes___slug
    context___nodes___tags___nodes
    context___nodes___title
    context___nodes___uri
    context___pageNumber
    context___page___content
    context___page___featuredImage___altText
    context___page___featuredImage___sourceUrl
    context___page___id
    context___page___isFrontPage
    context___page___pageBuilder___layouts
    context___page___pageId
    context___page___slug
    context___page___title
    context___page___uri
    context___post___author___name
    context___post___author___slug
    context___post___categories___nodes
    context___post___content
    context___post___date
    context___post___excerpt
    context___post___featuredImage___altText
    context___post___featuredImage___sourceUrl
    context___post___id
    context___post___link
    context___post___postId
    context___post___slug
    context___post___tags___nodes
    context___post___title
    context___post___uri
    context___publisher
    id
    internalComponentName
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    isCreatedByStatefulCreatePages
    matchPath
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    pluginCreatorId
    pluginCreator___browserAPIs
    pluginCreator___children
    pluginCreator___children___children
    pluginCreator___children___children___children
    pluginCreator___children___children___id
    pluginCreator___children___id
    pluginCreator___children___internal___content
    pluginCreator___children___internal___contentDigest
    pluginCreator___children___internal___description
    pluginCreator___children___internal___fieldOwners
    pluginCreator___children___internal___ignoreType
    pluginCreator___children___internal___mediaType
    pluginCreator___children___internal___owner
    pluginCreator___children___internal___type
    pluginCreator___children___parent___children
    pluginCreator___children___parent___id
    pluginCreator___id
    pluginCreator___internal___content
    pluginCreator___internal___contentDigest
    pluginCreator___internal___description
    pluginCreator___internal___fieldOwners
    pluginCreator___internal___ignoreType
    pluginCreator___internal___mediaType
    pluginCreator___internal___owner
    pluginCreator___internal___type
    pluginCreator___name
    pluginCreator___nodeAPIs
    pluginCreator___packageJson___dependencies
    pluginCreator___packageJson___dependencies___name
    pluginCreator___packageJson___dependencies___version
    pluginCreator___packageJson___description
    pluginCreator___packageJson___devDependencies
    pluginCreator___packageJson___devDependencies___name
    pluginCreator___packageJson___devDependencies___version
    pluginCreator___packageJson___keywords
    pluginCreator___packageJson___license
    pluginCreator___packageJson___main
    pluginCreator___packageJson___name
    pluginCreator___packageJson___peerDependencies
    pluginCreator___packageJson___peerDependencies___name
    pluginCreator___packageJson___peerDependencies___version
    pluginCreator___packageJson___version
    pluginCreator___parent___children
    pluginCreator___parent___children___children
    pluginCreator___parent___children___id
    pluginCreator___parent___id
    pluginCreator___parent___internal___content
    pluginCreator___parent___internal___contentDigest
    pluginCreator___parent___internal___description
    pluginCreator___parent___internal___fieldOwners
    pluginCreator___parent___internal___ignoreType
    pluginCreator___parent___internal___mediaType
    pluginCreator___parent___internal___owner
    pluginCreator___parent___internal___type
    pluginCreator___parent___parent___children
    pluginCreator___parent___parent___id
    pluginCreator___pluginFilepath
    pluginCreator___pluginOptions___background_color
    pluginCreator___pluginOptions___cacheDigest
    pluginCreator___pluginOptions___cache_busting_mode
    pluginCreator___pluginOptions___display
    pluginCreator___pluginOptions___fieldName
    pluginCreator___pluginOptions___icon
    pluginCreator___pluginOptions___include_favicon
    pluginCreator___pluginOptions___legacy
    pluginCreator___pluginOptions___name
    pluginCreator___pluginOptions___path
    pluginCreator___pluginOptions___pathCheck
    pluginCreator___pluginOptions___short_name
    pluginCreator___pluginOptions___start_url
    pluginCreator___pluginOptions___theme_color
    pluginCreator___pluginOptions___theme_color_in_head
    pluginCreator___pluginOptions___typeName
    pluginCreator___pluginOptions___url
    pluginCreator___resolve
    pluginCreator___ssrAPIs
    pluginCreator___version
}

enum SitePluginFieldsEnum {
    browserAPIs
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___dependencies
    packageJson___dependencies___name
    packageJson___dependencies___version
    packageJson___description
    packageJson___devDependencies
    packageJson___devDependencies___name
    packageJson___devDependencies___version
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___peerDependencies___name
    packageJson___peerDependencies___version
    packageJson___version
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginFilepath
    pluginOptions___background_color
    pluginOptions___cacheDigest
    pluginOptions___cache_busting_mode
    pluginOptions___display
    pluginOptions___fieldName
    pluginOptions___icon
    pluginOptions___include_favicon
    pluginOptions___legacy
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___short_name
    pluginOptions___start_url
    pluginOptions___theme_color
    pluginOptions___theme_color_in_head
    pluginOptions___typeName
    pluginOptions___url
    resolve
    ssrAPIs
    version
}

enum SortOrderEnum {
    ASC
    DESC
}

"What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option"
enum WPGraphQL_AvatarRatingEnum {
    G
    PG
    R
    X
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum WPGraphQL_CategoryIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Options for ordering the connection"
enum WPGraphQL_CommentsConnectionOrderbyEnum {
    COMMENT_AGENT
    COMMENT_APPROVED
    COMMENT_AUTHOR
    COMMENT_AUTHOR_EMAIL
    COMMENT_AUTHOR_IP
    COMMENT_AUTHOR_URL
    COMMENT_CONTENT
    COMMENT_DATE
    COMMENT_DATE_GMT
    COMMENT_ID
    COMMENT_IN
    COMMENT_KARMA
    COMMENT_PARENT
    COMMENT_POST_ID
    COMMENT_TYPE
    USER_ID
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum WPGraphQL_ContentNodeIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the URI."
    URI
}

"Allowed Content Types"
enum WPGraphQL_ContentTypeEnum {
    "The Type of Content object"
    ATTACHMENT
    "The Type of Content object"
    PAGE
    "The Type of Content object"
    POST
}

"The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\"."
enum WPGraphQL_ContentTypeIdTypeEnum {
    "The globally unique ID"
    ID
    "The name of the content type."
    NAME
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum WPGraphQL_MediaItemIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
    "Identify a media item by its source url"
    SOURCE_URL
    "Identify a resource by the URI."
    URI
}

"The size of the media item object."
enum WPGraphQL_MediaItemSizeEnum {
    "MediaItem with the large size"
    LARGE
    "MediaItem with the medium size"
    MEDIUM
    "MediaItem with the medium_large size"
    MEDIUM_LARGE
    "MediaItem with the post-thumbnail size"
    POST_THUMBNAIL
    "MediaItem with the thumbnail size"
    THUMBNAIL
    "MediaItem with the 1536x1536 size"
    _1536X1536
    "MediaItem with the 2048x2048 size"
    _2048X2048
}

"The status of the media item object."
enum WPGraphQL_MediaItemStatusEnum {
    "Objects with the auto-draft status"
    AUTO_DRAFT
    "Objects with the inherit status"
    INHERIT
    "Objects with the private status"
    PRIVATE
    "Objects with the trash status"
    TRASH
}

"Registered menu locations"
enum WPGraphQL_MenuLocationEnum {
    FOOTER
    MENU_1
    PRIMARY
    SOCIAL
}

"The MimeType of the object"
enum WPGraphQL_MimeTypeEnum {
    APPLICATION_JAVA
    APPLICATION_MSWORD
    APPLICATION_OCTET_STREAM
    APPLICATION_ONENOTE
    APPLICATION_OXPS
    APPLICATION_PDF
    APPLICATION_RAR
    APPLICATION_RTF
    APPLICATION_TTAF_XML
    APPLICATION_VND_APPLE_KEYNOTE
    APPLICATION_VND_APPLE_NUMBERS
    APPLICATION_VND_APPLE_PAGES
    APPLICATION_VND_MS_ACCESS
    APPLICATION_VND_MS_EXCEL
    APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
    APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
    APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
    APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT
    APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
    APPLICATION_VND_MS_PROJECT
    APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
    APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
    APPLICATION_VND_MS_WRITE
    APPLICATION_VND_MS_XPSDOCUMENT
    APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
    APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
    APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
    APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
    APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
    APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
    APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
    APPLICATION_WORDPERFECT
    APPLICATION_X_7Z_COMPRESSED
    APPLICATION_X_GZIP
    APPLICATION_X_TAR
    APPLICATION_ZIP
    AUDIO_AAC
    AUDIO_FLAC
    AUDIO_MIDI
    AUDIO_MPEG
    AUDIO_OGG
    AUDIO_WAV
    AUDIO_X_MATROSKA
    AUDIO_X_MS_WAX
    AUDIO_X_MS_WMA
    AUDIO_X_REALAUDIO
    IMAGE_BMP
    IMAGE_GIF
    IMAGE_JPEG
    IMAGE_PNG
    IMAGE_TIFF
    IMAGE_X_ICON
    TEXT_CALENDAR
    TEXT_CSS
    TEXT_CSV
    TEXT_PLAIN
    TEXT_RICHTEXT
    TEXT_TAB_SEPARATED_VALUES
    TEXT_VTT
    VIDEO_3GPP
    VIDEO_3GPP2
    VIDEO_AVI
    VIDEO_DIVX
    VIDEO_MP4
    VIDEO_MPEG
    VIDEO_OGG
    VIDEO_QUICKTIME
    VIDEO_WEBM
    VIDEO_X_FLV
    VIDEO_X_MATROSKA
    VIDEO_X_MS_ASF
    VIDEO_X_MS_WM
    VIDEO_X_MS_WMV
    VIDEO_X_MS_WMX
}

"The cardinality of the connection order"
enum WPGraphQL_OrderEnum {
    ASC
    DESC
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum WPGraphQL_PageIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the URI."
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum WPGraphQL_PostFormatIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum WPGraphQL_PostIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
    "Identify a resource by the URI."
    URI
}

"The format of post field data."
enum WPGraphQL_PostObjectFieldFormatEnum {
    "Provide the field value directly from database"
    RAW
    "Apply the default WordPress rendering"
    RENDERED
}

"The column to use when filtering by date"
enum WPGraphQL_PostObjectsConnectionDateColumnEnum {
    DATE
    MODIFIED
}

"Field to order the connection by"
enum WPGraphQL_PostObjectsConnectionOrderbyEnum {
    "Order by author"
    AUTHOR
    "Order by publish date"
    DATE
    "Preserve the ID order given in the IN array"
    IN
    "Order by the menu order value"
    MENU_ORDER
    "Order by last modified date"
    MODIFIED
    "Preserve slug order given in the NAME_IN array"
    NAME_IN
    "Order by parent ID"
    PARENT
    "Order by slug"
    SLUG
    "Order by title"
    TITLE
}

"The status of the object."
enum WPGraphQL_PostStatusEnum {
    "Objects with the acf-disabled status"
    ACF_DISABLED
    "Objects with the auto-draft status"
    AUTO_DRAFT
    "Objects with the draft status"
    DRAFT
    "Objects with the future status"
    FUTURE
    "Objects with the inherit status"
    INHERIT
    "Objects with the pending status"
    PENDING
    "Objects with the private status"
    PRIVATE
    "Objects with the publish status"
    PUBLISH
    "Objects with the request-completed status"
    REQUEST_COMPLETED
    "Objects with the request-confirmed status"
    REQUEST_CONFIRMED
    "Objects with the request-failed status"
    REQUEST_FAILED
    "Objects with the request-pending status"
    REQUEST_PENDING
    "Objects with the trash status"
    TRASH
}

"The logical relation between each item in the array when there are more than one."
enum WPGraphQL_RelationEnum {
    AND
    OR
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum WPGraphQL_TagIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Allowed taxonomies"
enum WPGraphQL_TaxonomyEnum {
    CATEGORY
    POSTFORMAT
    TAG
}

"The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\"."
enum WPGraphQL_TaxonomyIdTypeEnum {
    "The globally unique ID"
    ID
    "The name of the taxonomy"
    NAME
}

"The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field."
enum WPGraphQL_TermNodeIdTypeEnum {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Options for ordering the connection by"
enum WPGraphQL_TermObjectsConnectionOrderbyEnum {
    COUNT
    DESCRIPTION
    NAME
    SLUG
    TERM_GROUP
    TERM_ID
    TERM_ORDER
}

"The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\"."
enum WPGraphQL_UserNodeIdTypeEnum {
    "The Database ID for the node"
    DATABASE_ID
    "The Email of the User"
    EMAIL
    "The hashed Global ID"
    ID
    "The slug of the User"
    SLUG
    "The URI for the node"
    URI
    "The username the User uses to login with"
    USERNAME
}

"Names of available user roles"
enum WPGraphQL_UserRoleEnum {
    ADMINISTRATOR
    AUTHOR
    CONTRIBUTOR
    CUSTOM_PERMALINKS_MANAGER
    EDITOR
    SUBSCRIBER
}

"Field to order the connection by"
enum WPGraphQL_UsersConnectionOrderbyEnum {
    "Order by display name"
    DISPLAY_NAME
    "Order by email address"
    EMAIL
    "Order by login"
    LOGIN
    "Preserve the login order given in the LOGIN_IN array"
    LOGIN_IN
    "Order by nice name"
    NICE_NAME
    "Preserve the nice name order given in the NICE_NAME_IN array"
    NICE_NAME_IN
    "Order by registration date"
    REGISTERED
    "Order by URL"
    URL
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input ComponentFilterInput {
    children: NodeFilterListInput
    componentChunkName: StringQueryOperatorInput
    componentName: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input ComponentSortInput {
    fields: [ComponentFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    fields: [DirectoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
    highlight: String!
    opacity: Int
    shadow: String!
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input FileSortInput {
    fields: [FileFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input GraphQLSourceFilterInput {
    children: NodeFilterListInput
    fieldName: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    typeName: StringQueryOperatorInput
}

input GraphQLSourceSortInput {
    fields: [GraphQLSourceFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
    resolutions: ImageSharpResolutionsFilterInput
    sizes: ImageSharpSizesFilterInput
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpResolutionsFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpSizesFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpSortInput {
    fields: [ImageSharpFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input SiteBuildMetadataFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
    fields: [SiteBuildMetadataFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: DateQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
}

input SitePageContextAllPostsAuthorFilterInput {
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextAllPostsCategoriesFilterInput {
    nodes: SitePageContextAllPostsCategoriesNodesFilterListInput
}

input SitePageContextAllPostsCategoriesNodesFilterInput {
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextAllPostsCategoriesNodesFilterListInput {
    elemMatch: SitePageContextAllPostsCategoriesNodesFilterInput
}

input SitePageContextAllPostsFeaturedImageFilterInput {
    altText: StringQueryOperatorInput
    imageFile: SitePageContextAllPostsFeaturedImageImageFileFilterInput
    sourceUrl: StringQueryOperatorInput
}

input SitePageContextAllPostsFeaturedImageImageFileChildImageSharpFilterInput {
    fluid: SitePageContextAllPostsFeaturedImageImageFileChildImageSharpFluidFilterInput
}

input SitePageContextAllPostsFeaturedImageImageFileChildImageSharpFluidFilterInput {
    aspectRatio: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input SitePageContextAllPostsFeaturedImageImageFileFilterInput {
    childImageSharp: SitePageContextAllPostsFeaturedImageImageFileChildImageSharpFilterInput
}

input SitePageContextAllPostsFilterInput {
    author: SitePageContextAllPostsAuthorFilterInput
    categories: SitePageContextAllPostsCategoriesFilterInput
    content: StringQueryOperatorInput
    date: DateQueryOperatorInput
    excerpt: StringQueryOperatorInput
    featuredImage: SitePageContextAllPostsFeaturedImageFilterInput
    id: StringQueryOperatorInput
    link: StringQueryOperatorInput
    postId: IntQueryOperatorInput
    slug: StringQueryOperatorInput
    tags: SitePageContextAllPostsTagsFilterInput
    title: StringQueryOperatorInput
    uri: StringQueryOperatorInput
}

input SitePageContextAllPostsFilterListInput {
    elemMatch: SitePageContextAllPostsFilterInput
}

input SitePageContextAllPostsTagsFilterInput {
    nodes: SitePageContextAllPostsTagsNodesFilterListInput
}

input SitePageContextAllPostsTagsNodesFilterInput {
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextAllPostsTagsNodesFilterListInput {
    elemMatch: SitePageContextAllPostsTagsNodesFilterInput
}

input SitePageContextFilterInput {
    allPosts: SitePageContextAllPostsFilterListInput
    hasNextPage: BooleanQueryOperatorInput
    id: StringQueryOperatorInput
    itemsPerPost: IntQueryOperatorInput
    label: StringQueryOperatorInput
    nodes: SitePageContextNodesFilterListInput
    page: SitePageContextPageFilterInput
    pageNumber: IntQueryOperatorInput
    post: SitePageContextPostFilterInput
    publisher: BooleanQueryOperatorInput
}

input SitePageContextNodesAuthorFilterInput {
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextNodesCategoriesFilterInput {
    nodes: SitePageContextNodesCategoriesNodesFilterListInput
}

input SitePageContextNodesCategoriesNodesFilterInput {
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextNodesCategoriesNodesFilterListInput {
    elemMatch: SitePageContextNodesCategoriesNodesFilterInput
}

input SitePageContextNodesFeaturedImageFilterInput {
    altText: StringQueryOperatorInput
    imageFile: SitePageContextNodesFeaturedImageImageFileFilterInput
    sourceUrl: StringQueryOperatorInput
}

input SitePageContextNodesFeaturedImageImageFileChildImageSharpFilterInput {
    fluid: SitePageContextNodesFeaturedImageImageFileChildImageSharpFluidFilterInput
}

input SitePageContextNodesFeaturedImageImageFileChildImageSharpFluidFilterInput {
    aspectRatio: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input SitePageContextNodesFeaturedImageImageFileFilterInput {
    childImageSharp: SitePageContextNodesFeaturedImageImageFileChildImageSharpFilterInput
}

input SitePageContextNodesFilterInput {
    author: SitePageContextNodesAuthorFilterInput
    categories: SitePageContextNodesCategoriesFilterInput
    content: StringQueryOperatorInput
    date: DateQueryOperatorInput
    excerpt: StringQueryOperatorInput
    featuredImage: SitePageContextNodesFeaturedImageFilterInput
    id: StringQueryOperatorInput
    link: StringQueryOperatorInput
    postId: IntQueryOperatorInput
    slug: StringQueryOperatorInput
    tags: SitePageContextNodesTagsFilterInput
    title: StringQueryOperatorInput
    uri: StringQueryOperatorInput
}

input SitePageContextNodesFilterListInput {
    elemMatch: SitePageContextNodesFilterInput
}

input SitePageContextNodesTagsFilterInput {
    nodes: SitePageContextNodesTagsNodesFilterListInput
}

input SitePageContextNodesTagsNodesFilterInput {
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextNodesTagsNodesFilterListInput {
    elemMatch: SitePageContextNodesTagsNodesFilterInput
}

input SitePageContextPageFeaturedImageFilterInput {
    altText: StringQueryOperatorInput
    imageFile: SitePageContextPageFeaturedImageImageFileFilterInput
    sourceUrl: StringQueryOperatorInput
}

input SitePageContextPageFeaturedImageImageFileChildImageSharpFilterInput {
    fluid: SitePageContextPageFeaturedImageImageFileChildImageSharpFluidFilterInput
}

input SitePageContextPageFeaturedImageImageFileChildImageSharpFluidFilterInput {
    aspectRatio: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input SitePageContextPageFeaturedImageImageFileFilterInput {
    childImageSharp: SitePageContextPageFeaturedImageImageFileChildImageSharpFilterInput
}

input SitePageContextPageFilterInput {
    content: StringQueryOperatorInput
    featuredImage: SitePageContextPageFeaturedImageFilterInput
    id: StringQueryOperatorInput
    isFrontPage: BooleanQueryOperatorInput
    pageBuilder: SitePageContextPagePageBuilderFilterInput
    pageId: IntQueryOperatorInput
    slug: StringQueryOperatorInput
    title: StringQueryOperatorInput
    uri: StringQueryOperatorInput
}

input SitePageContextPagePageBuilderFilterInput {
    layouts: SitePageContextPagePageBuilderLayoutsFilterListInput
}

input SitePageContextPagePageBuilderLayoutsComponentsComponentFileFilterInput {
    _xxgraphQLComponent: SitePageContextPagePageBuilderLayoutsComponentsComponentFile_xxgraphQLComponentFilterInput
}

input SitePageContextPagePageBuilderLayoutsComponentsComponentFile_xxgraphQLComponentFilterInput {
    componentChunkName: StringQueryOperatorInput
    componentName: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
}

input SitePageContextPagePageBuilderLayoutsComponentsFilterInput {
    componentFile: SitePageContextPagePageBuilderLayoutsComponentsComponentFileFilterInput
    fieldGroupName: StringQueryOperatorInput
    heading: StringQueryOperatorInput
    image: SitePageContextPagePageBuilderLayoutsComponentsImageFilterInput
    text: StringQueryOperatorInput
}

input SitePageContextPagePageBuilderLayoutsComponentsFilterListInput {
    elemMatch: SitePageContextPagePageBuilderLayoutsComponentsFilterInput
}

input SitePageContextPagePageBuilderLayoutsComponentsImageFilterInput {
    imageFile: SitePageContextPagePageBuilderLayoutsComponentsImageImageFileFilterInput
    sourceUrl: StringQueryOperatorInput
}

input SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharpFilterInput {
    fluid: SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharpFluidFilterInput
}

input SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input SitePageContextPagePageBuilderLayoutsComponentsImageImageFileFilterInput {
    childImageSharp: SitePageContextPagePageBuilderLayoutsComponentsImageImageFileChildImageSharpFilterInput
}

input SitePageContextPagePageBuilderLayoutsFilterInput {
    components: SitePageContextPagePageBuilderLayoutsComponentsFilterListInput
    fieldGroupName: StringQueryOperatorInput
}

input SitePageContextPagePageBuilderLayoutsFilterListInput {
    elemMatch: SitePageContextPagePageBuilderLayoutsFilterInput
}

input SitePageContextPostAuthorFilterInput {
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextPostCategoriesFilterInput {
    nodes: SitePageContextPostCategoriesNodesFilterListInput
}

input SitePageContextPostCategoriesNodesFilterInput {
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextPostCategoriesNodesFilterListInput {
    elemMatch: SitePageContextPostCategoriesNodesFilterInput
}

input SitePageContextPostFeaturedImageFilterInput {
    altText: StringQueryOperatorInput
    imageFile: SitePageContextPostFeaturedImageImageFileFilterInput
    sourceUrl: StringQueryOperatorInput
}

input SitePageContextPostFeaturedImageImageFileChildImageSharpFilterInput {
    fluid: SitePageContextPostFeaturedImageImageFileChildImageSharpFluidFilterInput
}

input SitePageContextPostFeaturedImageImageFileChildImageSharpFluidFilterInput {
    aspectRatio: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input SitePageContextPostFeaturedImageImageFileFilterInput {
    childImageSharp: SitePageContextPostFeaturedImageImageFileChildImageSharpFilterInput
}

input SitePageContextPostFilterInput {
    author: SitePageContextPostAuthorFilterInput
    categories: SitePageContextPostCategoriesFilterInput
    content: StringQueryOperatorInput
    date: DateQueryOperatorInput
    excerpt: StringQueryOperatorInput
    featuredImage: SitePageContextPostFeaturedImageFilterInput
    id: StringQueryOperatorInput
    link: StringQueryOperatorInput
    postId: IntQueryOperatorInput
    slug: StringQueryOperatorInput
    tags: SitePageContextPostTagsFilterInput
    title: StringQueryOperatorInput
    uri: StringQueryOperatorInput
}

input SitePageContextPostTagsFilterInput {
    nodes: SitePageContextPostTagsNodesFilterListInput
}

input SitePageContextPostTagsNodesFilterInput {
    id: StringQueryOperatorInput
    name: StringQueryOperatorInput
    slug: StringQueryOperatorInput
}

input SitePageContextPostTagsNodesFilterListInput {
    elemMatch: SitePageContextPostTagsNodesFilterInput
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
    context: SitePageContextFilterInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
    matchPath: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
    pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
    fields: [SitePageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: SitePluginPackageJsonFilterInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsFilterInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
    dependencies: SitePluginPackageJsonDependenciesFilterListInput
    description: StringQueryOperatorInput
    devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
    keywords: StringQueryOperatorInput
    license: StringQueryOperatorInput
    main: StringQueryOperatorInput
    name: StringQueryOperatorInput
    peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
    elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsFilterInput {
    background_color: StringQueryOperatorInput
    cacheDigest: StringQueryOperatorInput
    cache_busting_mode: StringQueryOperatorInput
    display: StringQueryOperatorInput
    fieldName: StringQueryOperatorInput
    icon: StringQueryOperatorInput
    include_favicon: BooleanQueryOperatorInput
    legacy: BooleanQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
    pathCheck: BooleanQueryOperatorInput
    short_name: StringQueryOperatorInput
    start_url: StringQueryOperatorInput
    theme_color: StringQueryOperatorInput
    theme_color_in_head: BooleanQueryOperatorInput
    typeName: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input SitePluginSortInput {
    fields: [SitePluginFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
    author: StringQueryOperatorInput
    description: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSortInput {
    fields: [SiteFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

"Arguments for filtering the CategoryToCategoryConnection connection"
input WPGraphQL_CategoryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the CategoryToPostConnection connection"
input WPGraphQL_CategoryToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag OR another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to exclude objects in specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the CommentToCommentConnection connection"
input WPGraphQL_CommentToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """

    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """

    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """

    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """

    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """

    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [WPGraphQL_PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [WPGraphQL_ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: WPGraphQL_OrderEnum
    "Field to order the comments by."
    orderby: WPGraphQL_CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """

    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Input for the createCategory mutation"
input WPGraphQL_CreateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the category object"
    description: String
    "The name of the category object to mutate"
    name: String!
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createComment mutation"
input WPGraphQL_CreateCommentInput {
    "User agent used to post the comment."
    agent: String
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "IP address for the comment's author."
    authorIp: String
    "The url of the comment's author."
    authorUrl: String
    clientMutationId: String!
    "The ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "Parent comment of current comment."
    parent: ID
    "Type of comment."
    type: String
    "The userID of the comment's author."
    userId: Int
}

"Input for the createMediaItem mutation"
input WPGraphQL_CreateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    clientMutationId: String!
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: WPGraphQL_MimeTypeEnum
    "The WordPress post ID or the graphQL postId of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: WPGraphQL_MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the createPage mutation"
input WPGraphQL_CreatePageInput {
    "The userId to assign as the author of the object"
    authorId: ID
    clientMutationId: String!
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: WPGraphQL_PostStatusEnum
    "The title of the object"
    title: String
}

"Input for the createPostFormat mutation"
input WPGraphQL_CreatePostFormatInput {
    "The slug that the post_format will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the post_format object"
    description: String
    "The name of the post_format object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createPost mutation"
input WPGraphQL_CreatePostInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "Set connections between the post and categories"
    categories: WPGraphQL_PostCategoriesInput
    clientMutationId: String!
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Set connections between the post and postFormats"
    postFormats: WPGraphQL_PostPostFormatsInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: WPGraphQL_PostStatusEnum
    "Set connections between the post and tags"
    tags: WPGraphQL_PostTagsInput
    "The title of the object"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the createTag mutation"
input WPGraphQL_CreateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the post_tag object"
    description: String
    "The name of the post_tag object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createUser mutation"
input WPGraphQL_CreateUserInput {
    "User's AOL IM account."
    aim: String
    clientMutationId: String!
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string that contains the user's username for logging in."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Date values"
input WPGraphQL_DateInput {
    "Day of the month (from 1 to 31)"
    day: Int
    "Month number (from 1 to 12)"
    month: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Filter the connection based on input"
input WPGraphQL_DateQueryInput {
    "Nodes should be returned after this date"
    after: WPGraphQL_DateInput
    "Nodes should be returned before this date"
    before: WPGraphQL_DateInput
    "Column to query against"
    column: WPGraphQL_PostObjectsConnectionDateColumnEnum
    "For after/before, whether exact value should be matched or not"
    compare: String
    "Day of the month (from 1 to 31)"
    day: Int
    "Hour (from 0 to 23)"
    hour: Int
    "For after/before, whether exact value should be matched or not"
    inclusive: Boolean
    "Minute (from 0 to 59)"
    minute: Int
    "Month number (from 1 to 12)"
    month: Int
    "OR or AND, how the sub-arrays should be compared"
    relation: WPGraphQL_RelationEnum
    "Second (0 to 59)"
    second: Int
    "Week of the year (from 0 to 53)"
    week: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Input for the deleteCategory mutation"
input WPGraphQL_DeleteCategoryInput {
    clientMutationId: String!
    "The ID of the category to delete"
    id: ID!
}

"Input for the deleteComment mutation"
input WPGraphQL_DeleteCommentInput {
    clientMutationId: String!
    "Whether the comment should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The deleted comment ID"
    id: ID!
}

"Input for the deleteMediaItem mutation"
input WPGraphQL_DeleteMediaItemInput {
    clientMutationId: String!
    "Whether the mediaItem should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the mediaItem to delete"
    id: ID!
}

"Input for the deletePage mutation"
input WPGraphQL_DeletePageInput {
    clientMutationId: String!
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the page to delete"
    id: ID!
}

"Input for the deletePostFormat mutation"
input WPGraphQL_DeletePostFormatInput {
    clientMutationId: String!
    "The ID of the postFormat to delete"
    id: ID!
}

"Input for the deletePost mutation"
input WPGraphQL_DeletePostInput {
    clientMutationId: String!
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the post to delete"
    id: ID!
}

"Input for the deleteTag mutation"
input WPGraphQL_DeleteTagInput {
    clientMutationId: String!
    "The ID of the tag to delete"
    id: ID!
}

"Input for the deleteUser mutation"
input WPGraphQL_DeleteUserInput {
    clientMutationId: String!
    "The ID of the user you want to delete"
    id: ID!
    "Reassign posts and links to new User ID."
    reassignId: ID
}

"Arguments for filtering the MediaItemToCommentConnection connection"
input WPGraphQL_MediaItemToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """

    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """

    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """

    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """

    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """

    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [WPGraphQL_PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [WPGraphQL_ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: WPGraphQL_OrderEnum
    "Field to order the comments by."
    orderby: WPGraphQL_CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """

    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the MenuItemToMenuItemConnection connection"
input WPGraphQL_MenuItemToMenuItemConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: WPGraphQL_MenuLocationEnum
}

"Arguments for filtering the MenuToMenuItemConnection connection"
input WPGraphQL_MenuToMenuItemConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: WPGraphQL_MenuLocationEnum
}

"Arguments for filtering the PageToCommentConnection connection"
input WPGraphQL_PageToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """

    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """

    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """

    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """

    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """

    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [WPGraphQL_PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [WPGraphQL_ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: WPGraphQL_OrderEnum
    "Field to order the comments by."
    orderby: WPGraphQL_CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """

    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PageToPageConnection connection"
input WPGraphQL_PageToPageConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the pageToRevisionConnection connection"
input WPGraphQL_PageToRevisionConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Set relationships between the post to categories"
input WPGraphQL_PostCategoriesInput {
    "If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true."
    append: Boolean
    nodes: [WPGraphQL_PostCategoriesNodeInput]
}

"List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input WPGraphQL_PostCategoriesNodeInput {
    "The description of the category. This field is used to set a description of the category if a new one is created during the mutation."
    description: String
    "The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made."
    id: ID
    "The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the PostFormatToPostConnection connection"
input WPGraphQL_PostFormatToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag OR another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to exclude objects in specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input WPGraphQL_PostObjectsConnectionOrderbyInput {
    "The field to order the connection by"
    field: WPGraphQL_PostObjectsConnectionOrderbyEnum!
    "Possible directions in which to order a list of items"
    order: WPGraphQL_OrderEnum!
}

"Set relationships between the post to postFormats"
input WPGraphQL_PostPostFormatsInput {
    "If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true."
    append: Boolean
    nodes: [WPGraphQL_PostPostFormatsNodeInput]
}

"List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input WPGraphQL_PostPostFormatsNodeInput {
    "The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation."
    description: String
    "The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made."
    id: ID
    "The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Set relationships between the post to tags"
input WPGraphQL_PostTagsInput {
    "If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true."
    append: Boolean
    nodes: [WPGraphQL_PostTagsNodeInput]
}

"List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input WPGraphQL_PostTagsNodeInput {
    "The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation."
    description: String
    "The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made."
    id: ID
    "The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the PostToCategoryConnection connection"
input WPGraphQL_PostToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToCommentConnection connection"
input WPGraphQL_PostToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """

    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """

    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """

    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """

    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """

    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [WPGraphQL_PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [WPGraphQL_ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: WPGraphQL_OrderEnum
    "Field to order the comments by."
    orderby: WPGraphQL_CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """

    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PostToPostFormatConnection connection"
input WPGraphQL_PostToPostFormatConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the postToRevisionConnection connection"
input WPGraphQL_PostToRevisionConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag OR another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to exclude objects in specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the PostToTagConnection connection"
input WPGraphQL_PostToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Input for the registerUser mutation"
input WPGraphQL_RegisterUserInput {
    "User's AOL IM account."
    aim: String
    clientMutationId: String!
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "A string that contains the user's username."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the resetUserPassword mutation"
input WPGraphQL_ResetUserPasswordInput {
    clientMutationId: String!
    "Password reset key"
    key: String
    "The user's login (username)."
    login: String
    "The new password."
    password: String
}

"Input for the restoreComment mutation"
input WPGraphQL_RestoreCommentInput {
    clientMutationId: String!
    "The ID of the comment to be restored"
    id: ID!
}

"Arguments for filtering the RootQueryToCategoryConnection connection"
input WPGraphQL_RootQueryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToCommentConnection connection"
input WPGraphQL_RootQueryToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """

    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """

    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """

    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """

    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """

    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [WPGraphQL_PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [WPGraphQL_ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: WPGraphQL_OrderEnum
    "Field to order the comments by."
    orderby: WPGraphQL_CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """

    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the RootQueryToContentNodeConnection connection"
input WPGraphQL_RootQueryToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [WPGraphQL_ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToContentRevisionUnionConnection connection"
input WPGraphQL_RootQueryToContentRevisionUnionConnectionWhereArgs {
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToMediaItemConnection connection"
input WPGraphQL_RootQueryToMediaItemConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToMenuConnection connection"
input WPGraphQL_RootQueryToMenuConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: WPGraphQL_MenuLocationEnum
    "The slug of the menu to query items for"
    slug: String
}

"Arguments for filtering the RootQueryToMenuItemConnection connection"
input WPGraphQL_RootQueryToMenuItemConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: WPGraphQL_MenuLocationEnum
}

"Arguments for filtering the RootQueryToPageConnection connection"
input WPGraphQL_RootQueryToPageConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToPostConnection connection"
input WPGraphQL_RootQueryToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag OR another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to exclude objects in specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToPostFormatConnection connection"
input WPGraphQL_RootQueryToPostFormatConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTagConnection connection"
input WPGraphQL_RootQueryToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTermNodeConnection connection"
input WPGraphQL_RootQueryToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: WPGraphQL_TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "The Taxonomy to filter terms by"
    taxonomies: [WPGraphQL_TaxonomyEnum]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToUserConnection connection"
input WPGraphQL_RootQueryToUserConnectionWhereArgs {
    "Array of userIds to exclude."
    exclude: [Int]
    "Pass an array of post types to filter results to users who have published posts in those post types."
    hasPublishedPosts: [WPGraphQL_ContentTypeEnum]
    "Array of userIds to include."
    include: [Int]
    "The user login."
    login: String
    "An array of logins to include. Users matching one of these logins will be included in results."
    loginIn: Int
    "An array of logins to exclude. Users matching one of these logins will not be included in results."
    loginNotIn: Int
    "The user nicename."
    nicename: String
    "An array of nicenames to include. Users matching one of these nicenames will be included in results."
    nicenameIn: [String]
    "An array of nicenames to exclude. Users matching one of these nicenames will not be included in results."
    nicenameNotIn: [String]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_UsersConnectionOrderbyInput]
    "An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role."
    role: WPGraphQL_UserRoleEnum
    "An array of role names. Matched users must have at least one of these roles."
    roleIn: [WPGraphQL_UserRoleEnum]
    "An array of role names to exclude. Users matching one or more of these roles will not be included in results."
    roleNotIn: [WPGraphQL_UserRoleEnum]
    "Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string."
    search: String
    "Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'."
    searchColumns: [String]
}

"Input for the sendPasswordResetEmail mutation"
input WPGraphQL_SendPasswordResetEmailInput {
    clientMutationId: String!
    "A string that contains the user's username or email address."
    username: String!
}

"Arguments for filtering the TagToPostConnection connection"
input WPGraphQL_TagToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag OR another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to exclude objects in specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Input for the UpdateCategory mutation"
input WPGraphQL_UpdateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the category object"
    description: String
    "The ID of the category object to update"
    id: ID!
    "The name of the category object to mutate"
    name: String
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateComment mutation"
input WPGraphQL_UpdateCommentInput {
    "User agent used to post the comment."
    agent: String
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "IP address for the comment's author."
    authorIp: String
    "The url of the comment's author."
    authorUrl: String
    clientMutationId: String!
    "The ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the comment being updated."
    id: ID!
    "Parent comment of current comment."
    parent: ID
    "Type of comment."
    type: String
    "The userID of the comment's author."
    userId: Int
}

"Input for the updateMediaItem mutation"
input WPGraphQL_UpdateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    clientMutationId: String!
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: WPGraphQL_MimeTypeEnum
    "The ID of the mediaItem object"
    id: ID!
    "The WordPress post ID or the graphQL postId of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: WPGraphQL_MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the updatePage mutation"
input WPGraphQL_UpdatePageInput {
    "The userId to assign as the author of the object"
    authorId: ID
    clientMutationId: String!
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the page object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: WPGraphQL_PostStatusEnum
    "The title of the object"
    title: String
}

"Input for the UpdatePostFormat mutation"
input WPGraphQL_UpdatePostFormatInput {
    "The slug that the post_format will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the post_format object"
    description: String
    "The ID of the postFormat object to update"
    id: ID!
    "The name of the post_format object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updatePost mutation"
input WPGraphQL_UpdatePostInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "Set connections between the post and categories"
    categories: WPGraphQL_PostCategoriesInput
    clientMutationId: String!
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the post object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Set connections between the post and postFormats"
    postFormats: WPGraphQL_PostPostFormatsInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: WPGraphQL_PostStatusEnum
    "Set connections between the post and tags"
    tags: WPGraphQL_PostTagsInput
    "The title of the object"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the updateSettings mutation"
input WPGraphQL_UpdateSettingsInput {
    clientMutationId: String!
    "Allow people to submit comments on new posts."
    discussionSettingsDefaultCommentStatus: String
    "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
    discussionSettingsDefaultPingStatus: String
    "A date format for all date strings."
    generalSettingsDateFormat: String
    "Site tagline."
    generalSettingsDescription: String
    "This address is used for admin purposes, like new user notification."
    generalSettingsEmail: String
    "WordPress locale code."
    generalSettingsLanguage: String
    "A day number of the week that the week should start on."
    generalSettingsStartOfWeek: Int
    "A time format for all time strings."
    generalSettingsTimeFormat: String
    "A city in the same timezone as you."
    generalSettingsTimezone: String
    "Site title."
    generalSettingsTitle: String
    "Site URL."
    generalSettingsUrl: String
    "Blog pages show at most."
    readingSettingsPostsPerPage: Int
    "Default post category."
    writingSettingsDefaultCategory: Int
    "Default post format."
    writingSettingsDefaultPostFormat: String
    "Convert emoticons like :-) and :-P to graphics on display."
    writingSettingsUseSmilies: Boolean
}

"Input for the UpdateTag mutation"
input WPGraphQL_UpdateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the post_tag object"
    description: String
    "The ID of the tag object to update"
    id: ID!
    "The name of the post_tag object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateUser mutation"
input WPGraphQL_UpdateUserInput {
    "User's AOL IM account."
    aim: String
    clientMutationId: String!
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "The ID of the user"
    id: ID!
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Arguments for filtering the UserToCommentConnection connection"
input WPGraphQL_UserToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """

    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """

    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """

    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """

    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """

    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [WPGraphQL_PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [WPGraphQL_ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: WPGraphQL_OrderEnum
    "Field to order the comments by."
    orderby: WPGraphQL_CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """

    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the UserToContentRevisionUnionConnection connection"
input WPGraphQL_UserToContentRevisionUnionConnectionWhereArgs {
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToMediaItemConnection connection"
input WPGraphQL_UserToMediaItemConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPageConnection connection"
input WPGraphQL_UserToPageConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPostConnection connection"
input WPGraphQL_UserToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: WPGraphQL_DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: WPGraphQL_MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [WPGraphQL_PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [WPGraphQL_PostStatusEnum]
    status: WPGraphQL_PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag OR another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to exclude objects in specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input WPGraphQL_UsersConnectionOrderbyInput {
    field: WPGraphQL_UsersConnectionOrderbyEnum!
    order: WPGraphQL_OrderEnum
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"React component available through GraphQL"
scalar GraphQLComponent

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON